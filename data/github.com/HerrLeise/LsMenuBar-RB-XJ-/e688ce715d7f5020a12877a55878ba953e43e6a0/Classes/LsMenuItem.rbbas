#tag ClassProtected Class LsMenuItemInherits MenuItem	#tag Method, Flags = &h0		Sub AddItem(item As MenuItem)		  		  baseMenu.Append(item)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ClearCaches()		  DeleteMenuItems()		  parentItem = Nil		  ToolbarIcon = Nil		  miHover = Nil		  miInactive = Nil		  miNormal = Nil		  miSelected = Nil		End Sub	#tag EndMethod	#tag Method, Flags = &h1000		Sub Constructor()		  // Calling the overridden superclass constructor.		  // Note that this may need modifications if there are multiple constructor choices.		  // Possible constructor calls:		  // Constructor(Text As String, Tag As Variant = Nil) -- From MenuItem		  // Constructor() -- From MenuItem		  // Constructor(copy as MenuItem) -- From MenuItem		  Super.Constructor		  		  baseMenu = New MenuItem()		  		  Init_Draw()		  		  'clsMemoryTrap.GuardObject(Self)		End Sub	#tag EndMethod	#tag Method, Flags = &h1000		Sub Constructor(mMenu As LsMenuItem)		  // Calling the overridden superclass constructor.		  // Note that this may need modifications if there are multiple constructor choices.		  // Possible constructor calls:		  // Constructor(Text As String, Tag As Variant = Nil) -- From MenuItem		  // Constructor() -- From MenuItem		  // Constructor(copy as MenuItem) -- From MenuItem		  Super.Constructor		  		  baseMenu = New MenuItem()		  		  self.MenuName = mMenu.MenuName		  self.uID = mMenu.uID		  self.Text = mMenu.Text		  self.Tag = self.Text		  self.baseMenu = mMenu.baseMenu		  		  Init_Draw()		End Sub	#tag EndMethod	#tag Method, Flags = &h1000		Sub Constructor(mMenu As LsMenuItem, Text As String, Tag As Variant = Nil, MenuName As String, uID As String)		  // Calling the overridden superclass constructor.		  // Note that this may need modifications if there are multiple constructor choices.		  // Possible constructor calls:		  // Constructor(Text As String, Tag As Variant = Nil) -- From MenuItem		  // Constructor() -- From MenuItem		  // Constructor(copy as MenuItem) -- From MenuItem		  Super.Constructor		  		  baseMenu = New MenuItem()		  		  self.MenuName = MenuName		  self.uID = uID		  self.Text = Text		  self.Tag = self.Text		  self.baseMenu = mMenu.baseMenu		  		  Init_Draw()		End Sub	#tag EndMethod	#tag Method, Flags = &h1000		Sub Constructor(Text As String, Tag As Variant = Nil, MenuName As String, uID As String)		  // Calling the overridden superclass constructor.		  // Note that this may need modifications if there are multiple constructor choices.		  // Possible constructor calls:		  // Constructor(Text As String, Tag As Variant = Nil) -- From MenuItem		  // Constructor() -- From MenuItem		  // Constructor(copy as MenuItem) -- From MenuItem		  Super.Constructor		  		  baseMenu = New MenuItem()		  		  self.MenuName = MenuName		  self.uID = uID		  self.Text = Text		  self.Tag = self.Text		  		  Init_Draw()		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DeleteMenuItems()		  if baseMenu<>Nil Then		    'baseMenu = Nil		    'basemenu = New MenuItem()		    		    Dim i,n As Integer		    n = baseMenu.Count - 1		    if n>-1 Then		      For i=n downto 0		        baseMenu.Item(i).Close'Remove(i-1)		      Next		    End If		  Else		    baseMenu = new MenuItem		    		    		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawMenuItem(selected As Boolean = False, hover as Boolean = False, forceRedraw As Boolean = False)		  		  if forceRedraw Then		    Init_Draw()		  End If		  		  If isEnabled Then		    MenuPic = miNormal		    if hover Then MenuPic = miHover		    if selected Then MenuPic = miSelected		  Else		    MenuPic = miInactive		  End If		  		  		  		  'Dim gP As Picture = New Picture(1,1,32)		  'Dim w,h As Integer		  'h = MenuBarHeight		  '		  'if h<=0 Then h = 1		  '		  'gp.Graphics.AntiAlias = True		  'gp.Graphics.TextFont = TextFont		  'gp.Graphics.TextSize = TextSize		  'gp.Graphics.TextUnit = FontUnits.Pixel		  '		  '//Collect base Menu information		  'Dim mCaption As String = me.Text		  'Dim cW,xCW As Integer 		  'Dim pW As Integer		  'xCW = gp.Graphics.StringWidth(mCaption) + 4		  '		  'cw = xCW + 20		  '		  '		  'if isToolBarItem Then		  'if ToolbarIcon<>Nil Then		  'pW = ToolbarIcon.width		  'if showCaption Then		  'cw = xCW + pW + 30		  'Else		  'cw = pW + 30		  'End If		  'End If		  'if isPopUpBox Or isPopUpMenu Then		  'cw = cw + 20		  'End If		  'End If		  '		  '		  'Dim cH As Integer = gp.Graphics.TextAscent		  '//redim picture to given ratio		  'gP = New Picture(cW,h,32)		  '		  'gp.Graphics.AntiAlias = True		  'gp.Graphics.TextFont = TextFont		  'gp.Graphics.TextSize = TextSize		  'gp.Graphics.TextUnit = FontUnits.Pixel		  '		  '//		  '//Draw Background		  'If isToolBarItem Then		  'gp.Graphics.ForeColor = FillColor		  'gp.Graphics.FillRect(0,0,cW,h)		  'End If 		  '		  'if isEnabled Then		  'if selected Then		  'gp.Graphics.ForeColor = ItemHighlightColor		  'Else		  'if hover then		  'gp.Graphics.ForeColor = ItemHoverColor		  'Else		  'If isToolBarItem Then		  'gp.Graphics.ForeColor = RGB(FillColor.Red-5,FillColor.Green-5,FillColor.Blue-5)		  'Else		  'gp.Graphics.ForeColor = FillColor		  'End If		  'End If		  'End If		  'ENd If		  '		  'Dim lOff,rOff,iOff As Integer		  'loff = 4		  'roff = (loff*2)		  'iOff = 0		  '		  'If isToolBarItem Then		  'if not (GroupID = "") Then		  '		  'if isFirstInGroup Then		  'loff = 4		  'roff = 4		  'iOff = 0		  'Elseif isLastInGroup Then		  'loff = -1		  'roff = 4		  'Elseif isInsideGroup Then		  'loff = -1		  'roff = 1		  'iOff = 2		  'End If		  'gp.Graphics.FillRect(loff,4,cW + iOff - roff,h - 8)		  'if isPopUpBox Then		  'gp.Graphics.ForeColor = RGB(gp.Graphics.ForeColor.Red-10,gp.Graphics.ForeColor.Green-10,gp.Graphics.ForeColor.Blue-10)		  ''gp.Graphics.FillRect(cW + iOff - roff - 20 ,4,cW + iOff - roff,h - 8)		  'End If		  'gp.Graphics.ForeColor = ToolBarBorderColor		  'gp.Graphics.DrawRect(loff,4,cW + iOff - roff,h - 8)		  'if isPopUpBox Then		  ''gp.Graphics.DrawRect(cW + iOff - roff - 20 ,4,cW + iOff - roff,h - 8)		  'gp.Graphics.DrawPicture(popupmenu_disclosure,cW + iOff - roff - 16,(h/2)-(popupmenu_disclosure.Height/2))		  'Elseif isPopUpMenu Then		  'gp.Graphics.DrawPicture(dropdown_arrow,cW + iOff - roff - 16,(h/2)-(dropdown_arrow.Height/2))		  'End If		  '		  ''gp.Graphics.FillRect(0,3,cW,h - 6)		  ''gp.Graphics.ForeColor = ToolBarBorderColor		  ''gp.Graphics.DrawRect(0,3,cW,h - 6)		  'Else		  '		  '		  '		  'if isPopUpBox Then		  'gp.Graphics.FillRect(loff,4,cW - (roff),h - 8)		  'gp.Graphics.ForeColor = RGB(gp.Graphics.ForeColor.Red-10,gp.Graphics.ForeColor.Green-10,gp.Graphics.ForeColor.Blue-10)		  ''gp.Graphics.FillRect(cW - roff - 16,4,cW - (roff) - 4,h - 8)		  'Else		  'gp.Graphics.FillRect(loff,4,cW - (roff),h - 8)		  'End If		  '		  '		  '		  'if isPopUpBox Then		  ''gp.Graphics.DrawRect(cW - roff - 20,4,cW - roff,h - 8)		  'gp.Graphics.DrawPicture(popupmenu_disclosure,cW - roff - 14,(h/2)-(popupmenu_disclosure.Height/2))		  'Elseif isPopUpMenu Then		  'gp.Graphics.DrawPicture(dropdown_arrow,cW - roff - 16,(h/2)-(dropdown_arrow.Height/2))		  'End If		  '		  'gp.Graphics.ForeColor = ToolBarBorderColor		  'gp.Graphics.DrawRect(loff,4,cW - (roff),h - 8)		  '		  'End If		  'Else		  'gp.Graphics.FillRect(0,0,cW,h)		  'End If		  '		  '//		  '//Draw the Caption		  'Dim xToolIco As Picture 		  'if ToolbarIcon<>Nil Then		  'if ToolBarIcon.Height>((h-8)-6) Then		  'xToolIco = New Picture(pw,((h-8)-6),32)		  'xToolIco = ScalePicture(ToolbarIcon,pw,((h-8)-6))		  'xToolIco.Mask = ScalePicture(ToolbarIcon.mask,pw,((h-8)-6))		  ''xToolIco.Transparent = 1		  '		  'Else		  'xToolIco = ToolBarIcon		  'End If		  'End If		  '		  'gp.Graphics.Bold = False		  'if isEnabled Then		  'if selected Then		  'gp.Graphics.Bold = True		  'gp.Graphics.ForeColor = TextHighlightColor		  'Else		  'gp.Graphics.ForeColor = TextColor		  'End If		  'Else		  'gp.Graphics.ForeColor = &c4C4C4C		  'End If		  'If isToolBarItem Then		  'if ToolbarIcon<>Nil Then		  'if ShowCaption Then		  'gp.Graphics.DrawString(mCaption,2+ pW + 15 + loff,((h-ch)))		  'gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),10 + loff,(h/2)-(xToolIco.Height/2))		  'Else		  'if GroupID = "" Then		  'gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),15,(h/2)-(xToolIco.Height/2))		  'Else		  'if isFirstInGroup Then 		  'gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),16,(h/2)-(xToolIco.Height/2))		  'Elseif isLastInGroup Then		  'gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),16 - iOff - rOff,(h/2)-(xToolIco.Height/2))		  'Else		  'gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),15 - roff,(h/2)-(xToolIco.Height/2))		  'End If		  'End If		  'End If		  '		  'Else		  'gp.Graphics.DrawString(mCaption,2 +rOff+2,((h-ch)))		  '		  'End If		  '		  'Else		  'gp.Graphics.DrawString(mCaption, 2+ 10,ch+((h-ch)/2)-1)		  'End If		  '		  'MenuPic = gP		  '		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Init_Draw()		  		  		  miNormal = mDrawMenuItem(False,False,True)		  		  miHover = mDrawMenuItem(False,True,True)		  		  miInactive = mDrawMenuItem(False,False,False)		  		  miSelected = mDrawMenuItem(True,False,True)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function makeDisabledIcon(enabledIcon as picture) As picture		  		  dim x,y as integer		  dim thePic as picture = New Picture(enabledIcon.Width,enabledIcon.Height,32)		  dim c,white as color		  DIm mw,mh As Integer		  mw = enabledIcon.Width		  mh = enabledIcon.Height		  		  white = rgb(255,255,255)		  enabledicon.transparent = 1		  'thePic = New Picture(me.width,me.height,32)		  thePic.graphics.drawpicture enabledIcon,0,0		  		  for x = 0 to mw -  1		    for y = 0 to mh -1		      c = thepic.graphics.pixel(x,y)		      if c <> rgb(255,255,255)  then		        thepic.mask.graphics.pixel(x,y) = rgb(125,125,125)		      else		        thepic.mask.graphics.pixel(x,y) = rgb(255,255,255)		      end if		    next		  next		  'thePic.transparent = 1		  return thePic		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function mDrawMenuItem(selected As Boolean = False, hover as Boolean = False, active as Boolean = False) As Picture		  Dim gP As Picture = New Picture(1,1,32)		  Dim w,h As Integer		  h = MenuBarHeight		  		  if h<=0 Then h = 1		  		  gp.Graphics.AntiAlias = True		  gp.Graphics.TextFont = TextFont		  gp.Graphics.TextSize = TextSize		  gp.Graphics.TextUnit = FontUnits.Pixel		  		  //Collect base Menu information		  Dim mCaption As String = me.Text		  Dim cW,xCW As Integer 		  Dim pW As Integer		  xCW = gp.Graphics.StringWidth(mCaption) + 4		  		  cw = xCW + 20		  		  		  if isToolBarItem Then		    if ToolbarIcon<>Nil Then		      pW = ToolbarIcon.width		      if showCaption Then		        cw = xCW + pW + 30		      Else		        cw = pW + 30		      End If		    End If		    if isPopUpBox Or isPopUpMenu Then		      cw = cw + 20		    End If		  End If		  		  		  Dim cH As Integer = gp.Graphics.TextAscent		  //redim picture to given ratio		  gP = New Picture(cW,h,32)		  		  gp.Graphics.AntiAlias = True		  gp.Graphics.TextFont = TextFont		  gp.Graphics.TextSize = TextSize		  gp.Graphics.TextUnit = FontUnits.Pixel		  		  //		  //Draw Background		  If isToolBarItem Then		    gp.Graphics.ForeColor = FillColor		    gp.Graphics.FillRect(0,0,cW,h)		  End If 		  		  if active Then		    if selected Then		      gp.Graphics.ForeColor = ItemHighlightColor		    Else		      if hover then		        gp.Graphics.ForeColor = ItemHoverColor		      Else		        If isToolBarItem Then		          gp.Graphics.ForeColor = RGB(FillColor.Red-5,FillColor.Green-5,FillColor.Blue-5)		        Else		          gp.Graphics.ForeColor = FillColor		        End If		      End If		    End If		  ENd If		  		  Dim lOff,rOff,iOff As Integer		  loff = 4		  roff = (loff*2)		  iOff = 0		  		  If isToolBarItem Then		    if not (GroupID = "") Then		      		      if isFirstInGroup Then		        loff = 4		        roff = 4		        iOff = 0		      Elseif isLastInGroup Then		        loff = -1		        roff = 4		      Elseif isInsideGroup Then		        loff = -1		        roff = 1		        iOff = 2		      End If		      gp.Graphics.FillRect(loff,4,cW + iOff - roff,h - 8)		      if isPopUpBox Then		        gp.Graphics.ForeColor = RGB(gp.Graphics.ForeColor.Red-10,gp.Graphics.ForeColor.Green-10,gp.Graphics.ForeColor.Blue-10)		        'gp.Graphics.FillRect(cW + iOff - roff - 20 ,4,cW + iOff - roff,h - 8)		      End If		      gp.Graphics.ForeColor = ToolBarBorderColor		      gp.Graphics.DrawRect(loff,4,cW + iOff - roff,h - 8)		      if isPopUpBox Then		        'gp.Graphics.DrawRect(cW + iOff - roff - 20 ,4,cW + iOff - roff,h - 8)		        gp.Graphics.DrawPicture(popupmenu_disclosure,cW + iOff - roff - 16,(h/2)-(popupmenu_disclosure.Height/2))		      Elseif isPopUpMenu Then		        gp.Graphics.DrawPicture(dropdown_arrow,cW + iOff - roff - 16,(h/2)-(dropdown_arrow.Height/2))		      End If		      		      'gp.Graphics.FillRect(0,3,cW,h - 6)		      'gp.Graphics.ForeColor = ToolBarBorderColor		      'gp.Graphics.DrawRect(0,3,cW,h - 6)		    Else		      		      		      		      if isPopUpBox Then		        gp.Graphics.FillRect(loff,4,cW - (roff),h - 8)		        gp.Graphics.ForeColor = RGB(gp.Graphics.ForeColor.Red-10,gp.Graphics.ForeColor.Green-10,gp.Graphics.ForeColor.Blue-10)		        'gp.Graphics.FillRect(cW - roff - 16,4,cW - (roff) - 4,h - 8)		      Else		        gp.Graphics.FillRect(loff,4,cW - (roff),h - 8)		      End If		      		      		      		      if isPopUpBox Then		        'gp.Graphics.DrawRect(cW - roff - 20,4,cW - roff,h - 8)		        gp.Graphics.DrawPicture(popupmenu_disclosure,cW - roff - 14,(h/2)-(popupmenu_disclosure.Height/2))		      Elseif isPopUpMenu Then		        gp.Graphics.DrawPicture(dropdown_arrow,cW - roff - 16,(h/2)-(dropdown_arrow.Height/2))		      End If		      		      gp.Graphics.ForeColor = ToolBarBorderColor		      gp.Graphics.DrawRect(loff,4,cW - (roff),h - 8)		      		    End If		  Else		    gp.Graphics.FillRect(0,0,cW,h)		  End If		  		  //		  //Draw the Caption		  Dim xToolIco As Picture 		  if ToolbarIcon<>Nil Then		    if ToolBarIcon.Height>((h-8)-6) Then		      xToolIco = New Picture(pw,((h-8)-6),32)		      xToolIco = ScalePicture(ToolbarIcon,pw,((h-8)-6))		      xToolIco.Mask = ScalePicture(ToolbarIcon.mask,pw,((h-8)-6))		      'xToolIco.Transparent = 1		      		    Else		      xToolIco = ToolBarIcon		    End If		  End If		  		  gp.Graphics.Bold = False		  if active Then		    if selected Then		      gp.Graphics.Bold = True		      gp.Graphics.ForeColor = TextHighlightColor		    Else		      gp.Graphics.ForeColor = TextColor		    End If		  Else		    gp.Graphics.ForeColor = &c4C4C4C		  End If		  If isToolBarItem Then		    if ToolbarIcon<>Nil Then		      if ShowCaption Then		        gp.Graphics.DrawString(mCaption,2+ pW + 15 + loff,((h-ch)))		        gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),10 + loff,(h/2)-(xToolIco.Height/2))		      Else		        if GroupID = "" Then		          gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),15,(h/2)-(xToolIco.Height/2))		        Else		          if isFirstInGroup Then 		            gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),16,(h/2)-(xToolIco.Height/2))		          Elseif isLastInGroup Then		            gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),16 - iOff - rOff,(h/2)-(xToolIco.Height/2))		          Else		            gp.Graphics.DrawPicture(IIF(isEnabled,xToolIco,makeDisabledIcon(xToolIco)),15 - roff,(h/2)-(xToolIco.Height/2))		          End If		        End If		      End If		      		    Else		      gp.Graphics.DrawString(mCaption,2 +rOff+2,((h-ch)))		      		    End If		    		  Else		    gp.Graphics.DrawString(mCaption, 2+ 10,ch+((h-ch)/2)-1)		  End If		  		  return gP		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function mPopUp(x as integer, y As Integer) As MenuItem		  		  		  return basemenu.PopUp(x,y)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function ScalePicture(p as Picture, AvailableWidth as Integer, AvailableHeight as Integer) As Picture		  // This method takes a picture and returns a new picture that is scaled to fit within the passed boundaries. The aspect ratio is preserved.		  // The original image is not altered.		  		  dim returnPic as picture		  dim w, h as integer		  dim ratio as double		  		  // Check for nil object		  if p = nil then return nil		  		  // Work out the picture aspect ratio		  ratio = p.Width / p.Height		  		  // Scale depending on aspect ratio		  select case ratio		    		  case 1 ' square image to scale equally		    		    if availableWidth = availableHeight then		      w = availableWidth		      h = availableHeight		    elseif availableWidth < availableHeight then		      w = availableWidth		      h = availableWidth		    elseif availableWidth > availableHeight then		      w = availableHeight		      h = availableHeight		    end if		    		  case is < 1 ' portrait (taller than wider)		    		    if availableWidth <= availableHeight then		      		      h = availableWidth		      		    else		      		      h = availableHeight		      		    end if		    		    w = h * ratio		    		  case is > 1 ' landscape (wider than taller)		    		    if availableWidth <= availableHeight then		      		      w = availableWidth		      		    else		      		      w = availableHeight		      		    end if		    		    h = w / ratio		    		  end select		  		  returnPic = new Picture(w, h, 32)		  returnPic.Graphics.DrawPicture( p, 0, 0, returnPic.Width, returnPic.Height, 0, 0, p.Width, p.Height )		  		  return returnPic		  		End Function	#tag EndMethod	#tag Note, Name = About				LsMenuBar & LsMenuItem				This is a replacement for the built in MenuBars and ToolBars.		This class is able to behave like a MenuBar or a ToolBar with grouping and an overflowmenu.				--- --- --- --- --- --- --- ---				Title:    LsMenuItem		Version:  0.1				Author:   Patric Lee Atrott		Web:      www.atrott.net								### ### ### ### ### ### ### ###		Notes:		--- --- --- --- --- --- --- ---				LsMenuBar & LsMenuItem and pending classes, structures, etc.		are not finished yet and can be very buggy from time to time.						This class is able to use MBS Plugins.		It is highly recommended to use MBS Plugins.												### ### ### ### ### ### ### ###		Contributors:		--- --- --- --- --- --- --- ---				The XOJO Community				  // Cocoa_Mouseclick Code by: Jason K		  // https://forum.xojo.com/12285-move-mouse-cursor-and-click-by-code-for-mac		  // 25 May 2014				  // Windows_Mouseclick Code from: Michel B - XOJO Forum		  // https://forum.xojo.com/12259-move-mouse-position-click-by-code-windows		  // 25 May 2014				Icons by Yusuke Kamiyamane.		Fugue Icons		  (C) 2013 Yusuke Kamiyamane. All rights reserved.		  These icons are licensed under a Creative Commons		  Attribution 3.0 License.		  <http://creativecommons.org/licenses/by/3.0/>		  If you can't or don't want to provide attribution, please		  purchase a royalty-free license.		  <http://p.yusukekamiyamane.com/>								### ### ### ### ### ### ### ###		License:		--- --- --- --- --- --- --- ---				CC BY SA 4.0						http://creativecommons.org/licenses/by-sa/4.0/		http://creativecommons.org/licenses/by-sa/4.0/legalcode				You are free to:				    Share — copy and redistribute the material in any medium or format		    Adapt — remix, transform, and build upon the material		    for any purpose, even commercially.				    The licensor cannot revoke these freedoms as long as you follow the license terms.				Under the following terms:				    Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.				    ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.				    No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.				Notices:				    You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.		    No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.					#tag EndNote	#tag Property, Flags = &h0		baseMenu As MenuItem	#tag EndProperty	#tag Property, Flags = &h0		FillColor As Color = &c000000	#tag EndProperty	#tag Property, Flags = &h0		GroupID As String	#tag EndProperty	#tag Property, Flags = &h0		HelpTag As String	#tag EndProperty	#tag Property, Flags = &h0		isEnabled As Boolean = True	#tag EndProperty	#tag Property, Flags = &h0		isFirstInGroup As Boolean	#tag EndProperty	#tag Property, Flags = &h0		isHover As Boolean	#tag EndProperty	#tag Property, Flags = &h0		isInsideGroup As Boolean	#tag EndProperty	#tag Property, Flags = &h0		isLastInGroup As Boolean	#tag EndProperty	#tag Property, Flags = &h0		isPopUpBox As Boolean	#tag EndProperty	#tag Property, Flags = &h0		isPopUpMenu As Boolean	#tag EndProperty	#tag Property, Flags = &h0		isToolBarItem As Boolean = False	#tag EndProperty	#tag Property, Flags = &h0		isToolBarSeparator As Boolean	#tag EndProperty	#tag Property, Flags = &h0		isVisible As Boolean	#tag EndProperty	#tag Property, Flags = &h0		ItemHighlightColor As Color = &c000000	#tag EndProperty	#tag Property, Flags = &h0		ItemHoverColor As Color = &c000000	#tag EndProperty	#tag Property, Flags = &h0		MenuBarHeight As Integer	#tag EndProperty	#tag Property, Flags = &h0		MenuName As String	#tag EndProperty	#tag Property, Flags = &h0		MenuPic As Picture	#tag EndProperty	#tag Property, Flags = &h21		Private miHover As Picture	#tag EndProperty	#tag Property, Flags = &h21		Private miInactive As Picture	#tag EndProperty	#tag Property, Flags = &h21		Private miNormal As Picture	#tag EndProperty	#tag Property, Flags = &h21		Private miSelected As Picture	#tag EndProperty	#tag Property, Flags = &h0		mOffset As Integer	#tag EndProperty	#tag Property, Flags = &h0		parentItem As LsMenuItem	#tag EndProperty	#tag Property, Flags = &h0		Selected As Boolean	#tag EndProperty	#tag Property, Flags = &h0		showCaption As Boolean = True	#tag EndProperty	#tag Property, Flags = &h0		TextColor As Color = &c000000	#tag EndProperty	#tag Property, Flags = &h0		TextFont As String	#tag EndProperty	#tag Property, Flags = &h0		TextHighlightColor As Color = &c000000	#tag EndProperty	#tag Property, Flags = &h0		TextSize As Integer	#tag EndProperty	#tag Property, Flags = &h0		ToggleGroupID As String	#tag EndProperty	#tag Property, Flags = &h0		ToggleState As Boolean	#tag EndProperty	#tag Property, Flags = &h0		ToolBarBorderColor As Color	#tag EndProperty	#tag Property, Flags = &h0		ToolbarIcon As Picture	#tag EndProperty	#tag Property, Flags = &h0		uID As String	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AutoEnable"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Checked"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="CommandKey"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="FillColor"			Group="Behavior"			InitialValue="&c000000"			Type="Color"		#tag EndViewProperty		#tag ViewProperty			Name="GroupID"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Icon"			Group="Behavior"			InitialValue="0"			Type="Picture"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="isEnabled"			Group="Behavior"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isFirstInGroup"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isHover"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isInsideGroup"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isLastInGroup"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isPopUpBox"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isPopUpMenu"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isToolBarItem"			Group="Behavior"			InitialValue="False"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isToolBarSeparator"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="isVisible"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="ItemHighlightColor"			Group="Behavior"			InitialValue="&c000000"			Type="Color"		#tag EndViewProperty		#tag ViewProperty			Name="ItemHoverColor"			Group="Behavior"			InitialValue="&c000000"			Type="Color"		#tag EndViewProperty		#tag ViewProperty			Name="KeyboardShortcut"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="MenuBarHeight"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="MenuName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="MenuPic"			Group="Behavior"			Type="Picture"		#tag EndViewProperty		#tag ViewProperty			Name="mOffset"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Selected"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="showCaption"			Group="Behavior"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Text"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="TextColor"			Group="Behavior"			InitialValue="&c000000"			Type="Color"		#tag EndViewProperty		#tag ViewProperty			Name="TextFont"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="TextHighlightColor"			Group="Behavior"			InitialValue="&c000000"			Type="Color"		#tag EndViewProperty		#tag ViewProperty			Name="TextSize"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="ToggleGroupID"			Group="Behavior"			Type="String"		#tag EndViewProperty		#tag ViewProperty			Name="ToggleState"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="ToolBarBorderColor"			Group="Behavior"			InitialValue="&c000000"			Type="Color"		#tag EndViewProperty		#tag ViewProperty			Name="ToolbarIcon"			Group="Behavior"			Type="Picture"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="uID"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="_mIndex"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="_mName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass