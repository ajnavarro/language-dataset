;FUNCTION LIST IN FILE ORDER:

;===================================================================================================
; Function........:  CreateGUI()
;
; Description.....:  Creates the main GUI.
;
; Return Value(s).:  Handle to the created GUI.
;===================================================================================================
; Function........:  CreateGroupBox($Title, $TextWidth, $TextHeight, $TextColour,
;						$TextStyle, $x, $y, $w, $h, $BorderColour)
;
; Description.....:  Creates a box with a title around a certain area. Similar to
;						GUICtrlCreateGroup with $SS_SUNKEN but without glitched backgroundcolour.
;
; Parameter(s)....:  $Title			- A string which will be in the middle on the top of the group.
;										Should start and end with a space: " text "
;					 $TextWidth 	- Width of the text. Used to calculate the box. Either use
;										something like GetTextExtent or find the best value
;										by trial and error.
;					 $TextHeight	- Height of the text. Used to get the font height.
;					 $TextColour	- Colour of the text (24 bit RGB).
;					 $TextStyle		- Defines the textstyle as in GUICtrlSetFont.
;					 $x				- Left side of the box.
;					 $y				- Top side of the box.
;					 $w				- Width of the box.
;					 $h				- Height of the box.
;					 $BorderColour	- Colour of the border.
;===================================================================================================
; Function........:  CreateBitmapFromIcon($BackgroundColour, $FilePath, $IconIndex, $Size)
;
; Description.....:  Creates a bitmap from an icon (eg. from the Shell32.dll) which can be used for
;						various things like popmenus or listviews.
;
; Parameter(s)....:  $BackgroundColour	- Backgroundcolour of the bitmap. Should be set to
;											_WinAPI_GetSysColor($COLOR_MENU) most of the times.
;					 $FilePath			- Path to the file containing the icon.
;					 $IconIndex			- Index of the icon within the file.
;					 $Size				- Width/Length of the bitmap. Can only be a square.
;
; Return Value(s).:  On Success - A handle to the bitmap.
;                    On Failure - 0.
;===================================================================================================
; Function........:  DllList_PopUp($hwnd)
;
; Description.....:  Creates and manages the popup menu (rightclick) in the dll list.
;
; Parameter(s)....:  $hwnd	- A handle to the parent control.
;===================================================================================================
; Function........:  UpdateLV($hListView, $ActionID, $Mode = $M_All, $Index = -1)
;
; Description.....:  Updates the items of the specified listview according to the ActionId and Mode.
;
; Parameter(s)....:  $hListView		- A handle to the listview control.
;					 $ActionID		- Identifier of the action to perform (check $A_ID_... values).
;					 $Mode			- Either all, selected indices or one index can be changed.
;					 $Index			- 0-based index of the item to change. Only used when
;										$Mode is $M_Index.
;===================================================================================================
; Function........:  GUI_LV_SubclassProc($hWnd, $uMsg, $wParam, $lParam)
;
; Description.....:  A subclass procedure to filter messages to the listview. This allows using
;						'DELETE' to delete one or multiple dlls from the list. This is a much
;                       cleaner method than using GuiCtrlCreateDummy and GUISetAccelerators.
;
; Parameter(s)....:  normal SubClassProc arguments
;
; Return Value(s).:  Forwards the call to DefSubclassProc.
;===================================================================================================
; Function........:  GUI_GUI_WM_NOTIFY($hWnd, $uMsg, $wParam, $lParam)
;
; Description.....:  WM_NOTIFY wndProc of the main GUI. Catches various messages
;						sent to the dll list (rightclick, doubleclick...)
;
; Parameter(s)....:  normal wndProc arguments
;
; Return Value(s).:  Forwards calls to windows handler and returns $GUI_RUNDEFMSG.
;===================================================================================================
; Function........:  WM_NOTIFY($hWnd, $uMsg, $wParam, $lParam)
;
; Description.....:  Main WM_NOTIFY wndProc. Forwards the call to the WM_NOTIFY proc of the
;						main GUI or the	ProcessPicker depending on the current state.
;
; Parameter(s)....:  normal wndProc arguments
;
; Return Value(s).:  Forwards calls to WM_NOTIFY routines and returns their return values.
;===================================================================================================
; Function........:  WM_DROPFILES($hWnd, $uMsg, $wParam, $lParam)
;
; Description.....:  Handles dropped files to the dll list.
;
; Parameter(s)....:  normal wndProc arguments
;
; Return Value(s).:  Forwards calls to windows handler and returns $GUI_RUNDEFMSG.
;===================================================================================================
; Function........:  WM_COMMAND($hwnd, $uMsg, $wParam, $lParam)
;
; Description.....:  Handles changes to the text input fields.
;
; Parameter(s)....:  normal wndProc arguments
;
; Return Value(s).:  Forwards calls to windows handler and returns $GUI_RUNDEFMSG.
; Function........:  ResetGUI()
;
; Description.....:  Resets the GUI settings according to the g_ variables.
;						This doesn't include the dll list.
;===================================================================================================
; Function........:  ResetGUI()
;
; Description.....:  Resets the settings tab of the GUI to default settings.
;===================================================================================================
; Function........:  CloseGUI()
;
; Description.....:  Closes the GUI(s) and does some clean up.
;===================================================================================================
; Function........:  UpdateCursor()
;
; Description.....:  Handles cursor change, tooltip and clicks to the GH Banner.
;===================================================================================================
; Function........:  AddFile($Path, $UpdateLastDirectory = False)
;
; Description.....:  Adds a single file to the dll list after verifying that the file is a valid
;						PE file and isn't already in the list.
;
; Parameter(s)....:  $Path					- Absolute path to the file.
;					 $UpdateLastDirectory	- Updates the last directory if set to True.
;===================================================================================================
; Function........:  AddFiles($Path = "")
;
; Description.....:  Opens a file dialog at the specified path or g_LastDirectory. Files selected
;						in the dialog will be added to the list (if valid).
;
; Parameter(s)....:  $Path - Path to the directory. If empty $g_LastDirectory will be used.
;===================================================================================================
; Function........:  UpdateProcessIcon($TargetPID)
;
; Description.....:  Updates the process icon and g_ExePath in the top left corner when
;						another process has been selected.
;
; Parameter(s)....:  $TargetPID - The process identifier of the new process.
;===================================================================================================
; Function........:  UpdateTargetProcess()
;
; Description.....:  Updates the global variables according to the current GUI settings (eg. after
; 						the ProcessPicker was used).
;===================================================================================================
; Function........:  SearchProcessList($List, $PID, $Name, $bRetName)
;
; Description.....:  Loops through the process list to find the specified process (id).
;
; Parameter(s)....:  $List 		- A process list created by ListProcess().
;                    $PID		- A process identifier to find.
;                    $Name		- A process name to find. Only searched for it $PID is 0.
;					 $bRetName	- If true returns the process name and otherwise the $PID.
;
; Return Value(s).:	 Depends on the $bRetName argument. If the process doesn't exist it returns 0.
;===================================================================================================
; Function........:  UpdateGUI()
;
; Description.....:  Main GUI function which handles all events and updates the GUI accordingly.
;
; Return Value(s).:  $GUI_RETURN 	- Default return value.
;                    $GUI_EXIT 		- User closed the GUI (mainloop in Main.au3 will stop).
;					 $GUI_INJECT	- Injection event.
;					 $GUI_UPDATE	- User wants to update the injector.
;					 $GUI_RESET		- GUI gets reseted.
;===================================================================================================

#include "ProcessList.au3"
#include "Settings.au3"

#Region Global Definitions

Global Const $VK_DELETE = 0x2E

$h_GUI 				= 0

$h_P_Banner 		= 0

;Settings
$h_L_ProcName 		= 0
$h_I_ProcName 		= 0
$h_L_PID 			= 0
$h_I_PID 			= 0
$h_I_PID 			= 0
$h_R_ProcName 		= 0
$h_R_PID 			= 0
$h_P_ProcIcon		= 0
$h_B_SelProcess		= 0
$h_G_InjDelay 		= 0
$h_I_InjDelay 		= 0
$h_C_CloseAI 		= 0
$h_C_AutoI 			= 0

;;Injection method
$h_C_Method			= 0
$h_C_HijackHandle	= 0
	$h_L_HijackHandle 	= 0
$h_C_LaunchMethod	= 0
$h_C_CloakThread	= 0
	$h_L_CloakThread	= 0

;;Cloaking
$h_C_Header 		= 0
$h_C_Shift			= 0
	$h_L_Shift			= 0
$h_C_Unlink 		= 0
	$h_L_Unlink 		= 0
$h_C_Clean			= 0
	$h_L_Clean			= 0
$h_C_RandomizeName  = 0
$h_C_LoadCopy		= 0

;Settings
$h_B_Reset 			= 0

;Files
$h_L_Dlls 			= 0
$h_B_Add 			= 0
$h_B_Inject 		= 0
$h_B_Remove 		= 0

;Info
$h_L_Version 		= 0
$h_B_Help 			= 0
$h_B_Changelog 		= 0
$h_B_ToggleTips		= 0

$h_T_TooltipCtrl	= 0

$l_GUIWidth 	= 800
$l_GUIHeight	= 440
$l_BannerHeight = 66

$l_WindowTitle 	= "GH Injector V" & $g_CurrentVersion

$l_bBanner = Binary( _
		"0x
		"ECE7DE9F5AE7E82DB8C690E8922FB1D8C996E9EFB7499F6B6B8588ED2FE89BEFB4BF7585BAE24B71AE16D1B81574FACD9AFBD36B60D72B1D29897C8BB41DC8C8E13CE06ED031515AB85BAD65B82DD278CADC005465180A2C84028875DEB5CD56AE02138CE311AC635389662EF9383C5D4964139A6C26EB8F509A9808EF0D7300FAF4D5D4B474E72B970199C3AE28EEAF4C95D4A3312939AB1CA81271C6AE38F5D4B19442B8AEA6AF0B9E68E47F1C7AE38F4570D7021C057F1C6AE705B4592F2A612E6F540C6DD2FA09C2335B2E6CA74E9791F3B996DA8934F00AB738332B759692E7061D4B9A79E54FE2DCA6FE426E36FB816DA794F11644A9BD4C6B6CCFC7CF7BB8DF8C39648126F9711DD26D308E13FF0038C969FF0015D5D55A6354EBAC89E9514831499441964D08EF0D7300FAF4D5D4A0E9555CB8757C49E996B8A3368925C46D09FCB2B9789D806572A3E242F31A3D426A7FF443D4FFC40014110100000000000000000000000000000090FFDA0008010301013F01613FFFC40014110100000000000000000000000000000090FFDA0008010201013F01613FFFC40047100001020205060A08040502070000000001020300110410122131132032415171052223335261727391B11442628192A1B2D1435374C124303463E194A2155054606482F0FFDA0008010100063F0256FCCB84F74736AF0FF931B292A909996ACE92525476089FA23F2EECC4949293B0FF002825092A51C00FE54D3457943686CC49C6D4D9F684B3EE04EE8D0578675C851F74719246F1FCC4EF856FAA4318E3F28E743508B95606C45D1CE2BC624F243A3E7E319468DA6FE69A9DEECE6D27DDE7523B020918849F28E74C73A6394421C1BA51364DFF009671A93BE1C01C2005473AA8E7551C759554B4A5C20038473A638D25F6847E42FF00DA60A54246AE0BEE0FD4732840DFCA0873B46B43AF242BD3959320FE56BFFEEA875837D8371DA356625FE11B456A1345111728F5AB608B146B3416BA14712F9E316BD2DF9EDCA18B149B34E6BA34813F9E30BA4500949409B94670DE9EB07588114895D8795652DC9284DEB71572503AE1543A009A1573B4850E339BB60AB82BBB57D462827FB821CA7D19212B49FE2194FABED0EACDA3CBFE9DBF2A8D2A94E7A3D0C195AF59676262C707308A227F32569C3EF89AA96F93DE18929F2FA3A0FF001C7CE24CA45029BA9B9F24E6ED90A6DC4942D264526B90BCC71C655DE8EA1172AC0D88BA2E715E3127921D1B75C5B6D5691F315124D940C54624CA25EDAAF317B8AF18E709EA37C494034BE90C22CA848D406D80E2757267DD9809D14F18C15F4C5AA93BE15BEACA7E22EE4F575E6CC5E358DB06C19A3543BDDAB3693B879D48EC2615D857966022E2203C2E382C75C237C3BDA39821CDF99933A69BD07F6AB82BB83F51CCA177821CED1A9A611A4B54A0A5AE6191926F708A352F1758E41DDDEA9ADDE117D36D0CF15A41F5DCFF0010B75D515B8B3324E688A47BBCAA348A42FD1E849C5D3AFA93B4C0A35191E8F424E0DEB575AB6D7C15DD2BEA3142EF214EB77DE42927050D86114BA2DF43770FEDABA27328FF00A66FE980959B0CA45B715B12226058611C569B182539A871D54A9ECF127F9A9FB8AF29F88BD1EA1B739281898C9A39B461D7D79B933A69BD07F6A92750E343AD9F5EF1BF309D6E197BA1856C9A6A4EF856FAACEA40B39EEF76ACDA4EE1E7523B09857615E59AE23A49846F877B4730439BF312A1A8C2C0C271C16BA3D19C7921922684CFD631FD03FF00047F40FF00C11FD03FF04511C7286F21095CCA8A70873B46AA553CE9AB906779C4F854BA23A64CD293933D47D53E30B6D624B419115706D186193CB2B7ABFC6708A47BBCA0708708A1628F3E4DA18B87F6100AE496D3721A4E8A07566705774AFA8C50BBC85F68C2DA7D394A1BD7388FDC75C4AD651958B4DB830526BA3FE99BFA6294E0D27DD4B33EA179FDBF9253A91C5CE797AC2643DF9C950D4616061387D7ECCBC6028622263455C6150031316068A05910E0E8A81A93BE15BE043BBEBB8A46F54A349BF8C46937F188B46C94CE5719C3BDDAB3693B879D48EC2615D857966CF624F94237C38328748C738A8E7151C7515408737E6AE3828256A4F20703ED18E757F1473ABF8A39D5FC514205C591941EB439DA301291351320228D44654C64A8E8919BE81359D2D71A547FF508FBC4C2A8F3FD423EF147A62AC4DF4C9CB0A0A16C63855415EA551519C21DA42ECD2E98A91435EAB7762AFB438E3E7D250F5CEB6BC142052E88A2ED097AF5A0F45599C15DD2BEA3142EF217DA357FC3A96A934A3369D3F84AFB42D97536569C6AA3FE99BFA6132F529467EF4D696D2520ABA464239EA2FF00A847DE39EA2FFA847DE0250BA32947002909829388BA127AE1DED673E371CF5476D7E557B4D1F954B77A02EDF5388E920D49DF0ADF536F7FEAADF9CDB3AF4950B1B50A19B483B6C8A91D84C2BB0AF2CD5AF5AF8A3F7846F877B4730439BF32D1D04718C151C4DF1C15DC1FA8E650BBC10E768C3D4F58E251536875AFD58529466A519935D2B838E2B1956BB63EE2A4917BD423223FB67FCE708A47BBCAA2400E34BB9C695A2B11E994225CA1AB10749A3B0D7C15DD2BEA3142EF217DA358A32CFF001ED0E4567F113D18208911AA28FF00A66FE98A5F079C5F4DA6FB620837119B48E115E8D1D32475ACE15B6F0D62CAB7E759568AC59829388CDB47411C630A51D77C328D899F8D564E8AF8A60A4E221B6F5AB8E7F6A9B3D70A4EC309DF0ADF514A84DB56222D0E3367050CCCA39A5EAA20A8DE4C2563545A4F36ABC1AE42F3096358E32B7D" & _
		"48EC2615D857966651CE235E7BA309245C06C846F877B4730439BEBE28BB59D42324DDE9D6AE955C15DC1FA8E650BBC10E768C5168034D5CBBDBCE03C331B79172D0AB4203ED0E42929CAA3AA788F180EA45A182907050D623D328337688714FACD751FBE62A94FABD1DA97276B170F5081148F7795769125A1572DB568AC6C31E9B419AA8A74D074993B0FDEAE0AEE95F518A17790BED1AC29264A17822154C6C4A98D0FE21B1EB8E98FDE28FFA66FE984AD06CA9266088349A30029C072D471EBFB49FB448891D9593734C234DE5E8A61BA2D1414D0D9D19E2B3D23594AEF6D58889E920E0A1980ACC947046BA86A7C7FBA24448D7248FF11926EF1EB2B6C01B617B05D5B2BD4E697EF0A56AD55DAE980A84EF856FAF8A6E3883818E334507D831F8A7C23926C24F495798993335CB149C52708BD0B4764CE3F14F847248C9FB589AC194A4008991684A528E657F1C734BF8E39365293B557C4D6A2A3503B20A8B2B99BF4E3995FC71CCAFE381610A4EF54EA2A534B99F6E39A5FC71C5627DB54E244C93D14DC2BA2B766CE411627B6F9E63348B36F26AB5284BAB45B45BB451B61D7D7A4B54F35BA2A9132DACA90BD80E22ACA30E16D5D5AE274BA059735B945558F9611A74EDD65313A1D02D39F994A55BF9611947DC2E2FAEA71FB362DEACCCA377837290AC1436185A996F24D937227394511AB32C824A67B6F9C3348B36F26A9D9852B699E621E68C969F9C079A6B229C9A536364854168514A860444B842888A51FCE49B0E78EB89CE9CDF5492A89B5437A92AFF00C87249F01012B210D2745A6C5940F754DADD6F2AD03C644E538716D37926899A5139CAAE29BB5A4E11C66CA3B063F14F84722D841E91BCC4C999AE4EA43A369C7C63F153E062E42D7DA328B37211D14D4954A72338276D6E372993A2766DCC6C4AF4894277C2B7FF00DC69DF1FFFC400291000010203070501010101000000000000010011213151102041617181A191B1D1E1F0C1F13060FFDA0008010100013F21E4AE19631501D111C846B52FF4750A634BAC6853A853A853358C68531A1FF167B94B851D95BD92735CAE427AD641C563690D7E1B440DC94605B1BB2B4024C039A059B7D01D964E70FDD7CBB1DC8E888E4635A95D1CE22A0976432E904A21AE9049886230B3825C9584101CA0004647963D538A81E47378445C0CEB4350790C2914B8CFC9E6C0380FE1BA02468816420341BC68A44C4C1B024F32A96CC4F75089339B13D91C6CE1FBA2B580006B68003004093A91AA6FC700616082C08741941080A317F0260B385812C0009733B98040018057D8ADA65214248607B9285BE47702DC35C8CAAB18E04F721CA8C73DE7755FA547742F563DED2BAA88DD1417C89AE5200E001E11A6D14001CF3025D8550C5844500012FE6A30098322FD78C61E555C1BA06C023C34D852F221E8AC4E72099B1707066C9CB6659CFA3E455252207D922F2E60A119F29262799588368C0092000465ACCF5EAA0FB2DE11170CEB43500203BA0778968CDA1B08C4CBE1ED18259177C29DBDEA42155672846B729BD46088D91CD85173264DA000703A38B9F9232130A180A1CC59C12E4ACDC4C96293B930C40F20A288711C992FAD4BFD7CAA5D408D98804200982161CB75C0F75F02B739D749EA28F3031BEB66F915B25CC9F4A9527C83DB7DCB9DD433215CCDD271B5A1184091924F94C5546E063701694172172FB764716B0913A488B3C7018B5B15C2DC226CAAA36639053AD9B019E27E55173E4D09F4ADAFC7C6EA03770A52DEB70162E2050419808847049F86B4F598E55E4C4564150616663746E461E60636044AC52D83AAB41B58DCD099A7DACDA05D8FBB3825C9201CB5548E5036BFF5A97FAF954BC84EE453B8885C6F740641F62750A750A92E75D224CC02852B20D11445430015FF0074BFBA5FDD2051295800BE456CC2816C50B4EEB22EC28CBF1189DE9276045852D3B9C6F017B90B97DB457A181B611CF263826B45656A00BA5B845F52A8BD00FCF9441C21887291F36FC9A11CBC3192FF0008C0063050A480234BC5E45105E3CFC22855B0345A519DCA70CB846527D9361232230423E0A27CACD9D661E2CE0972489CD0841BC66D2E2C14AD20838A980712FAD4BFD7CAA5E402290127A971BDD01410203E6BFBCBFBC8A824049D73AE900E40529461C20E024182FF00AA5FD52FEA9170870125F22A893010189454C900441106A86D62E0A0405C10B3A321DC4288888C0EF6031E1BB383C8BDC855079F846A85263ECFE9360D246B08C0BC60E78DD2DC22FA95B09BE1C8CD8A7A3360FD1959F2685F6900DD8DA4B0CC08F78995AB16186FB1693CA9E624993D980140DAC378DF15FB5E112B49B0E175B803DD8619A0DFEEC07993FA9009DCB99AD153711FCB3825C9582D988D20F5783D562643A28B1A33A5DC9041EAF67CAA5E405F21D3F12E17BAF815B9CEBA42CC474459D1257AD9BE4553DA9B271601D63B27B241189369679CE019750221A066A794F144AE0EDDD7B90B97DBB03A0A77427CA01341BE07C0E370B708BEA56D08E193963CC61D111B1CC4A60AF9342619308FEB81B87086412188385D10C31AFE1D806913B224912624D81F9A80F57847CC411A3CB9409D8EC45D1E723A22CE0653713D49ECC33A77943708C6D069CD9341D13BD8C1704B92B044D5DBF619A0009A4C7C1B8103A8F3399C91D974E4A98C1BA04CBD2AD20004900022028B91D1C36B3E552EA0EB96B133CA87198233C0B81EEBE056E73AE1100809B0D429E5C47ACF17ED9BE45561A0B688DA775C24AC44CC269108D7C01C101F3067AE62383C5E7168D297030FE19D3D2CD729" & _
		
		"484087E65E68158936897789A395A2823D9A0920B1DD73E1A59426DB81F5348EC05B71A21E05E623B3276E01BC1119AB141164CD92E2779562990A4E005707B2D4AF65AB46EE0A7CD20C910B3A373EF896794235E16BDEBF6BDEBF680C40B3C898B3B7040C393D0E8E1EBB4D7B6D5461C9792239D28F53A2869D00C04B8B1806461398AF80FBAF6F639108BAA055B3866A9A807EA91DB642AE340D7ADFED7ADFED7ADFED062096897B22D7A8D544A948951803BB515975B69544485E61C204FE6A4012E351680A13E6240D99CD4D3B819A984917939BE0FEE9620303DF7BCC184E948945726540CF990B2D51513B5FDE03032C030E5C1E9746BDE6AE07698BB2F82BD3065672A774FB70744CD108988D3870699F1624CAE8F1A0281B97740375E33264E9D86FD009AD122052A49186F9E1458114EC94F344914E8B27DF3452489BA087ECE60805D58288310973708FD536CD4F5FF4706B692D727C7DB8011BE933B4F967B52912532AEB57CE02138D8D0C2BD96A57B2D5E0B7DC30E4E05EB07B3C62A2A36A99AC64F4649D01E6946922139CD3EA8C392E42E44E72FA1C3D769AF6DAA8C39348E3CD90F42C1DEBDCE8AF7DAB93E03EEBDBD8E4396C6661180EEC14FB4F521679717B0DEBD46AA0ED12B6EF4C786AA5AE8C512AF76A2A28900EF5329FE80522410308E4D60046AF023B4C3A079BE0FEF8F1821FFA4310C9D05C6E50B8FDC959665D91BF260F4BA35EF35717D021108257CCAEDC7B293F00D80591327834270952B5DEADBAC9481C87428611E3151529C9964A6B88574A294A255CDE18D0020C9C5FAC1F3CCDC0F36198ED0A744CBB24E509642561180EAB077AC78A9DD9AD16C04E63E91C244C4D38191ECC3440C993A8C55B564DF86C3C4BDF80348370CD67E1A5C7DE15AF65A95ECB5783EE88F89A6D28A5FE743F43C71633A196C733323C8699D34B49F9AD5F54B1D4CCEF443170B02717A261C5EF8C14AB4229D524990763E5787AED35EDB55187153564286D0CDDF028D20EC18703AEAD7B1D15EFB5727C07DD7B7B1C6C92657035C028EAC6CF08FD0C8EFCD8BD86F5EA3556506098FD6DB1ABE46AE156A4F8A27853C1F665DA29697B9C5C0F44F0C34928A05D7135E1D04DF9241F00572168BAB09BD7C3FDF27167973A4BFF0001C46E53723D094F2BE82637E383D2E8D7BCD5C4F3E52813223923407E2C1436099E0033DDC1A35CE3216911EB563E6B130B8E6712B8DCA41CEA210C4470E3DD2C1FABE009569D45D8C3EC7D8B1A0719D90188230DA51855DDD968E8EA3C4150095C0296028A1EA309E1299AB380B0274E1BD26A381C23D38E18025EC5AAC0286C56CD11E11B32F34074809BAC5131942FCD89F8E02A1184B8D60EC742DD3D8F2A0352EC4D8780E0220C232344F8017709F99AF65A95ECB578C13B68626E59A53237FE1763CD125749F612FD5763A88F4901D8A490F2B95789ACE4F561193B945F29C490EC09F9A04339480BDEF50074A929B2FA052AAAB2B75783BD819333089A7D353DD10B30EB5FC8561DA6DC56E863013DC3F0AC9D98BC0D0323A70B31631D619A94D0C084ACB5FE62BFCC5438C37004F08ACC8846A42AECE13B15FE52AB284B6087612A5CED200F663D5E3E47156C916CB1B724FD1689394E54F0862E755ACF0C29F4B606C56C6C101D39755206E18C5C402F6675E0240923B85593444A441CE01EE6A8EFE717D3F7A3266532E849E8A01E885B650AC1A005590990C54430A73DF241A720C66651DB22BE312B0C27253888124CC6D59EADDFC591168B2B02F2D2B3698631ADF461312AC725D9F84928B0F30911C46A149C332303AD86DC0B971E9D8225C6A17D8928762A6ECEF5081EDD8A363F2D29896393B89E86AC70EDFE085DD2EFC2F43B6436F06135723D925B69318E0A90C0975AAD4C83B813E2B1E6825767F612FD50E9B191D148EC29C63CAE55DDE02888C25C4A29B72283617F33483106140EF6A2387E53BDC0AF9A82E8C923FB2EABC1B7048B1317C6B115AE7559E20D19BB63CACA2DC49A482598C93C4C57B2D4AF65ABFF00D1FB2D4AFFD9" _
	)

$l_bLulIcon = Binary( _
		 "0x
		 "7CAFF7389B1FF7283A8FFB4D0F6FFB0CAF7FFADC6F3FFABC3F5FF4A5F7AFF213440FF27343E812C4F6600292C3400000000000000000000000000000000000000000000000000A6C8FF007992C100B5D6FACEC2E8FFFF759CC9FF446698FF436898FF99BAE7FFB7D6FFFF6077A5FF2C3B58FF6C809CFFC5DEF6FFC6E5FFFFAFCBF7FFAFC9F7FFB1C9FBFF4D6282FF1C2F3DFF2F3E4B563A4E5D001821280000000000000000000000000000000000000000000000000069758700A3D0FF008EACD0036D95C5EF3C5E8FFF698ABFFF5B7CACFF6986B4FFBCD9FFFFBBD5F9FFC0D8F6FFD6F0FFFFD4EEFFFFC9E5FDFFB8D5FAFFABC6F8FFAECAFDFF596E91FF1B2D3BFF293844193242510000000000000000000000000000000000000000000000000000000000000000003841570088BDFF0059759E586587B8FF617EADFF293A53FF7F98BFFFC3E1FFFFCBE7FFFFCAE6FFFFCBE6FEFFCEE7FDFFC8E2FAFFB8D5F8FFABC8F8FFADC8FDFF52678BFF20303DFE152029001B2936000000000000000000000000000000000000000000000000000000000000000000000000003E526C001F2A3C00506687C5657D9EFF98B4D6FFBEE0FFFFBFE2FFFFC3E3FBFFBFDDFAFFC1DEFAFFCCE7FBFFC6E2FAFFAECBFBFFACC8FFFFA6BDF6FF3A4C69FF1C2C37FF212B34042A3741000000000000000000000000000000000000000000000000000000000000000000000000001A273A00A2C5F500617AA019AAD0FCFEC2ECFFFFBFE3FFFFBBE0FAFFBEDFFBFFBBDEFAFFBDDDFAFFBCDAFAFFB4D3FBFFB1CEFFFFB4CEFFFF64769FFF142331FF1F2F39EA20292E0027343F000000000000000000000000000000000000000000000000000000000000000000000000000000000028436A00FFFFFF0086A9DF35B2D8FFFFBBDDFFFFBFE2FAFFC5E9FBFFC1E5FBFFBBDFFDFFBBDCFFFFBFDAFFFFB3CEFFFF6A80AEFF14212EFF1C2834EC1F2D374D0000000017252E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089ACDD0000000000AACCF827B5D7FFE0C7E6FFFFDEFFFFFFF2FFFFFFDBFFFFFFCDEEFFFFADC6FFFF536891FF111F2EFF131D28BF20252F0023293B002A2D350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000626F9000FFFFFF00B4CEFF00C8E7FF57DBFFFF95ADC8E1F692ADCEFF6F86AAFF2A3D59FF0D1928FF182732FF1E2A363A2838470008161C000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B320000063F0000000C8D000918FF0F1F2DFF1B2936FF121E29FF121D28A9121E260016252E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001C2C38000C131C0018273694152633FC0F1926DC101823630C0D15000F141E000000000000000000000000000000000000000000F803FFF0F0007FF0F0001FF0E0000FF0C00007F0C00007F0E00003F0F00001F0F80001F0F80000F0F80000F0F80000F0F8000070F8000030FC000030FC000030FE000030FE000030FF000030FF000030FF800070FFC00030FFC00070FFE00070FFF001F0FFFC01F0FFFF03F0FFFF87F0" _
    )

$l_BannerPath 		= @TempDir & "\GH Banner.jpg"
$l_HoverBanner 		= False
$l_HoverBannerPrev	= False

$l_IconPath			= @TempDir & "\lul.ico"

$l_HoverProcIcon 		= False
$l_HoverProcIconPrev 	= False
$g_ExePath				= "No process selected."

Global $DropFileBuffer 			= 0
Global $g_DllList_SortSense[5] 	= [False, False, False, False, False]
Global $g_ProcessList			= 0
$l_IgnoreInputChange 			= False
$l_ChangedFont					= False
$l_ProcIconIndex				= 0
$l_DoubleClickedDll				= -1
$l_UpdateProcess				= True
$l_ProcessDead					= False
$l_ProcessPickerActive			= False
$l_TargetProcessArchitecture	= 0
$l_UpdateByTickCount 			= True
$last_tick 						= 0

$h_GUI_LV_SubclassProc 	= 0
$ph_GUI_LV_SubclassProc = 0
$h_D_SelAll = 0

Global Const $A_ID_Unused		= 0
Global Const $A_ID_Toggle 		= 1
Global Const $A_ID_Activate 	= 2
Global Const $A_ID_Deactivate 	= 3
Global Const $A_ID_Open 		= 4
Global Const $A_ID_SelectAll	= 5
Global Const $A_ID_Delete 		= 6

Global Const $M_Index		= 0
Global Const $M_Selected	= 1
Global Const $M_All			= 2

Global $h_bitmap_buffer[7] = [0, 0, 0, 0, 0, 0, 0]

Global $g_PopUpMenu_0_Names[5] 	= ["Toggle", "Activate", "Deactivate", "Open", "Delete"]
Global $g_PopUpMenu_0_AIDs[5]	= [$A_ID_Toggle, $A_ID_Activate, $A_ID_Deactivate, $A_ID_Open, $A_ID_Delete]

Global $g_PopUpMenu_1_Names[5] 	= ["Toggle all", "Activate all", "Deactivate all", "Select all", "Delete all"]
Global $g_PopUpMenu_1_AIDs[5]	= [$A_ID_Toggle, $A_ID_Activate, $A_ID_Deactivate, $A_ID_SelectAll, $A_ID_Delete]

#EndRegion

Func CreateGUI()

	FileDelete($l_BannerPath)
	FileWrite($l_BannerPath, $l_bBanner)

	FileDelete($l_IconPath)
	FileWrite($l_IconPath, $l_bLulIcon)

	If (@AutoItX64) Then

		$l_WindowTitle &= " (64-bit)"

	Else

		$l_WindowTitle &= " (32-bit)"

	EndIf

	$h_GUI = GUICreate($l_WindowTitle, $l_GUIWidth, $l_GUIHeight, 100, 100, Default, $WS_EX_ACCEPTFILES)
	If IsAdmin() Then
		_WinAPI_ChangeWindowMessageFilterEx($h_GUI, $WM_DROPFILES, $MSGFLT_ALLOW)
		_WinAPI_ChangeWindowMessageFilterEx($h_GUI, $WM_COPYGLOBALDATA, $MSGFLT_ALLOW)
    EndIf

	$h_D_SelAll = GUICtrlCreateDummy()

	$h_P_Banner = GUICtrlCreatePic($l_BannerPath, 0, 0, $l_GUIWidth, $l_BannerHeight)
		GUICtrlSetCursor($h_P_Banner, 0)

	CreateGroupBox(" Settings ", 70, 25, 0, $FW_BOLD, 10, 80, $l_GUIWidth / 3 - 15, $l_GUIHeight - 95, 0xB0B0B0)

		$h_L_ProcName = GUICtrlCreateLabel("Process:", 20, 105, 45, 20)
		$h_I_ProcName = GUICtrlCreateInput($g_Processname, 85, 102, $l_GUIWidth / 3 - 100, 20)

		$h_L_PID = GUICtrlCreateLabel("PID:", 20, 135, 25, 20)
		$h_I_PID = GUICtrlCreateInput($g_PID, 85, 132, 40, 20, $ES_NUMBER)

		GUIStartGroup()
			$h_R_ProcName 	= GUICtrlCreateRadio("", 65, 102, 15, 20)
			$h_R_PID 		= GUICtrlCreateRadio("", 65, 132, 15, 20)

		If ($g_ProcessByName) Then
			GUICtrlSetState($h_R_ProcName, $GUI_CHECKED)
			GUICtrlSetState($h_I_PID, $GUI_DISABLE)
		Else
			GUICtrlSetState($h_R_PID, $GUI_CHECKED)
			GUICtrlSetState($h_I_ProcName, $GUI_DISABLE)
		EndIf

		$h_B_SelProcess = GUICtrlCreateButton("Select process", 155, 131, $l_GUIWidth / 3 - 170, 22)

		$h_G_InjDelay = GUICtrlCreateLabel("Delay:", 20, 165, 35, 20)
		$h_I_InjDelay = GUICtrlCreateInput($g_InjectionDelay, 65, 162, $l_GUIWidth / 3 - 80, 20, $ES_NUMBER)

		$h_C_CloseAI 	= GUICtrlCreateCheckbox("Close after injection", 68, 185)
		If ($g_CloseAfterInjection) Then
			GUICtrlSetState($h_C_CloseAI, $GUI_CHECKED)
		EndIf

		$h_C_AutoI 		= GUICtrlCreateCheckbox("Auto", 185, 185)
		If ($g_AutoInjection) Then
			GUICtrlSetState($h_C_AutoI, $GUI_CHECKED)
		EndIf

		CreateGroupBox(" Injection method ", 100, 19, 0, $FW_BOLD, 15, 215, $l_GUIWidth / 3 - 25, 70, 0xB0B0B0)

			GUIStartGroup()
				$h_C_Method	= GUICtrlCreateCombo("", 20, 230, 121, -1, $CBS_DROPDOWNLIST)
					GUICtrlSetData($h_C_Method, "LoadLibraryExW|LdrLoadDll|ManualMap", "LoadLibraryExW")
					_GUICtrlComboBox_SetCurSel($h_C_Method, $g_InjectionMethod)

					$h_L_HijackHandle = GUICtrlCreateLabel("", 150, 230, 100, 20)
						GUICtrlSetState($h_L_HijackHandle, $GUI_DISABLE)
				$h_C_HijackHandle = GUICtrlCreateCheckbox("Hijack handle", 150, 230, 100, 20)
				If (NOT $g_RunNative) Then
					GUICtrlSetState($h_C_HijackHandle, $GUI_DISABLE)
					GUICtrlSetState($h_L_HijackHandle, $GUI_ENABLE)
					If (BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_HIJACK_HANDLE)
					EndIf
				ElseIf (BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE)) Then
					GUICtrlSetState($h_C_HijackHandle, $GUI_CHECKED)
				EndIf

				$h_C_LaunchMethod = GUICtrlCreateCombo("", 20, 255, 121, -1, $CBS_DROPDOWNLIST)
					GUICtrlSetData($h_C_LaunchMethod, "NtCreateThreadEx|Thread Hijacking|SetWindowsHookEx|QueueUserAPC", "NtCreateThreadEx")
					_GUICtrlComboBox_SetCurSel($h_C_LaunchMethod, $g_LaunchMethod)

					$h_L_CloakThread = GUICtrlCreateLabel("", 150, 255, 100, 20)
						GUICtrlSetState($h_L_CloakThread, $GUI_DISABLE)
				$h_C_CloakThread = GUICtrlCreateCheckbox("Cloak thread", 150, 255, 100, 20)
				If ($g_LaunchMethod <> 0) Then
					GUICtrlSetState($h_C_CloakThread, $GUI_DISABLE)
					GUICtrlSetState($h_L_CloakThread, $GUI_ENABLE)
				ElseIf (BitAND($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)) Then
					GUICtrlSetState($h_C_CloakThread, $GUI_CHECKED)
				EndIf

		CreateGroupBox(" Cloaking ", 54, 19, 0, $FW_BOLD, 15, 295, $l_GUIWidth / 3 - 25, 95, 0xB0B0B0)

			GUIStartGroup()
				$h_C_Header = GUICtrlCreateCombo("", 20, 310, 93, -1, $CBS_DROPDOWNLIST)
					GUICtrlSetData($h_C_Header, "Keep PEH|Erase PEH|Fake PEH", "Keep PEH")
				If (BitAND($g_InjectionFlags, $INJ_ERASE_HEADER)) Then
					_GUICtrlComboBox_SetCurSel($h_C_Header, 1)
				ElseIf (BitAND($g_InjectionFlags, $INJ_FAKE_HEADER)) Then
					_GUICtrlComboBox_SetCurSel($h_C_Header, 2)
				EndIf

					$h_L_Unlink = GUICtrlCreateLabel("", 20, 335, 100, 20)
						GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
				$h_C_Unlink = GUICtrlCreateCheckbox("Unlink from PEB", 20, 335, 100, 20)
				If (BitAND($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)) Then
					GUICtrlSetState($h_C_Unlink, $GUI_CHECKED)
				EndIf
				If ($g_InjectionMethod = 2) Then
					GUICtrlSetState($h_C_Unlink, BitOr($GUI_CHECKED, $GUI_DISABLE))
					GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
				EndIf

					$h_L_Shift 	= GUICtrlCreateLabel("", 125, 310, 125, 20)
						GUICtrlSetState($h_L_Shift, $GUI_DISABLE)
				$h_C_Shift 	= GUICtrlCreateCheckbox("Shift module", 125, 310, 125, 20)
					$h_L_Clean  = GUICtrlCreateLabel("", 125, 335, 110, 20)
						GUICtrlSetState($h_L_Clean, $GUI_DISABLE)
				$h_C_Clean  = GUICtrlCreateCheckbox("Clean data directories", 125, 335, 120, 20)
				If ($g_InjectionMethod <> 2) Then
					GUICtrlSetState($h_C_Shift, $GUI_DISABLE)
					GUICtrlSetState($h_C_Clean, $GUI_DISABLE)
					GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
					GUICtrlSetState($h_L_Clean, $GUI_ENABLE)
				Else
					If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
						GUICtrlSetState($h_C_Shift, $GUI_CHECKED)
					EndIf
					If (BitAND($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)) Then
						GUICtrlSetState($h_C_Clean, $GUI_CHECKED)
					EndIf
				EndIf

				$h_C_RandomizeName 	= GUICtrlCreateCheckbox("Randomize file name", 125, 360)
				$h_C_LoadCopy		= GUICtrlCreateCheckbox("Load DLL copy", 20, 360)
				If (BitAND($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)) Then
					GUICtrlSetState($h_C_RandomizeName, $GUI_CHECKED)
				EndIf
				If (BitAND($g_InjectionFlags, $INJ_LOAD_DLL_COPY)) Then
					GUICtrlSetState($h_C_LoadCopy, $GUI_CHECKED)
				EndIf

		$h_B_Reset = GUICtrlCreateButton("Reset settings", $l_GUIWidth / 24 + 3, $l_GUIHeight - 45, $l_GUIWidth / 4, 22)


	CreateGroupBox(" Files ", 44, 25, 0, $FW_BOLD, $l_GUIWidth / 3 + 5, 80, 2 * $l_GUIWidth / 3 - 15, $l_GUIHeight - 145, 0xB0B0B0)

        $h_L_Dlls = GUICtrlCreateListView("|Filename|Path|Architecture|fuckadasd", $l_GUIWidth / 3 + 10, 95, 2 * $l_GUIWidth / 3 - 25, $l_GUIHeight - 200, $LVS_REPORT, BitOR($LVS_EX_FULLROWSELECT, $LVS_EX_CHECKBOXES, $LVS_EX_GRIDLINES))
		   _GUICtrlListView_SetColumnWidth($h_L_Dlls, 0, 18)
		   _GUICtrlListView_SetColumnWidth($h_L_Dlls, 1, 120)
		   _GUICtrlListView_SetColumnWidth($h_L_Dlls, 2, 2 * $l_GUIWidth / 3 - 280)
		   _GUICtrlListView_SetColumnWidth($h_L_Dlls, 3, 85)
		   _GUICtrlListView_SetColumnWidth($h_L_Dlls, 4, 0)
		   GUICtrlSetState($h_L_Dlls, $GUI_DROPACCEPTED)

		   $h_B_Add 	= GUICtrlCreateButton("Add files", $l_GUIWidth / 3 + 15, $l_GUIHeight - 95, $l_GUIWidth / 6, 22)
		   $h_B_Inject 	= GUICtrlCreateButton("Inject", 2 * $l_GUIWidth / 3 - $l_GUIWidth / 12, $l_GUIHeight - 95, $l_GUIWidth / 6, 22)
		   $h_B_Remove 	= GUICtrlCreateButton("Remove selected files", $l_GUIWidth - $l_GUIWidth / 6 - 20, $l_GUIHeight - 95, $l_GUIWidth / 6, 22)

	CreateGroupBox(" Info ", 35, 25, 0, $FW_BOLD, $l_GUIWidth / 3 + 5, $l_GUIHeight - 55, 2 * $l_GUIWidth / 3 - 15, 40, 0xB0B0B0)

		$h_B_ToggleTips	= GUICtrlCreateButton("Disable Tooltips", $l_GUIWidth / 3 + 15, $l_GUIHeight - 45, $l_GUIWidth / 8, 22)
		$h_B_Help 		= GUICtrlCreateButton("Help", 37 * $l_GUIWidth / 72 + 10 / 3, $l_GUIHeight - 45, $l_GUIWidth / 8, 22)
		$h_B_Changelog 	= GUICtrlCreateButton("Changelog", 25 * $l_GUIWidth / 36 - 25 / 3, $l_GUIHeight - 45, $l_GUIWidth / 8, 22)
		$h_L_Version 	= GUICtrlCreateLabel("Version " & $g_CurrentVersion, 7 * $l_GUIWidth / 8 - 20, $l_GUIHeight - 44, $l_GUIWidth / 8, 21, BitOR($SS_SUNKEN, $SS_CENTER))
			GUICtrlSetFont($h_L_Version, 12, $FW_BOLD)
			GUICtrlSetBkColor($h_L_Version, 0xCCCCAA)

			If (StringCompare($g_CurrentVersion, $g_NewestVersion) OR $g_IgnoreUpdates = True) Then
				GUICtrlSetColor($h_L_Version, 0xFF0000)
				GUICtrlSetCursor($h_L_Version, 0)
			Else
				GUICtrlSetColor($h_L_Version, 0x559955)
			EndIf

	GUIRegisterMsg($WM_NOTIFY,	 	"WM_NOTIFY")
	GUIRegisterMsg($WM_DROPFILES, 	"WM_DROPFILES")
	GUIRegisterMsg($WM_COMMAND, 	"WM_COMMAND")

    $h_GUI_LV_SubclassProc 	= DllCallbackRegister("GUI_LV_SubclassProc", 'LRESULT', 'HWND;UINT;WPARAM;LPARAM;UINT_PTR;DWORD_PTR')
	$ph_GUI_LV_SubclassProc = DllCallbackGetPtr($h_GUI_LV_SubclassProc)
	_WinAPI_SetWindowSubclass(GUICtrlGetHandle($h_L_Dlls), $ph_GUI_LV_SubclassProc, 1, 0)

	$h_T_TooltipCtrl = _GUIToolTip_Create($h_GUI)
    _GUIToolTip_SetDelayTime($h_T_TooltipCtrl, $TTDT_AUTOPOP, 32767)
    _GUIToolTip_SetMaxTipWidth($h_T_TooltipCtrl, 1000)
	_GUIToolTip_SetTitle($h_T_TooltipCtrl, "Info", $TTI_INFO)

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select the target process by it's executable name (not unique).", GUICtrlGetHandle($h_L_ProcName))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select the target process by it's executable name (not unique).", GUICtrlGetHandle($h_R_ProcName))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select the target process by it's identifier (unique but changes when the process restarts).", GUICtrlGetHandle($h_L_PID))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select the target process by it's identifier (unique but changes when the process restarts).", GUICtrlGetHandle($h_R_PID))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Select a process using the ProcessPicker™.", GUICtrlGetHandle($h_B_SelProcess))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Delays the injection (in ms).", GUICtrlGetHandle($h_G_InjDelay))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "The injector automatically closes after injecting the checkmarked dll(s).", GUICtrlGetHandle($h_C_CloseAI))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "If the injector finds the target process, it automatically injects the checkmarked dll(s).", GUICtrlGetHandle($h_C_AutoI))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "LoadLibraryExW is the default injection method which simply uses LoadLibraryExW." & @CRLF & _
		"LdrLoadDll is an advanced injection method which uses LdrLoadDll and bypasses LoadLibrary(Ex) hooks." & @CRLF & _
		"ManualMap is an advanced injection technique which bypasses most module detection methods.", GUICtrlGetHandle($h_C_Method))
	If (NOT $g_RunNative) Then
		_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Hijacks a handle from another process. To use this method please run the 64-bit version of the injector.", GUICtrlGetHandle($h_L_HijackHandle));dummy label
	Else
		_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Hijacks a handle from another.", GUICtrlGetHandle($h_C_HijackHandle))
	EndIf
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "NtCreateThreadEx: Creates a simple remote thread to load the dll(s)." & @CRLF & _
		"Thread hijacking: Redirects a thread to a codecave to load the dll(s)." & @CRLF & _
		"SetWindowsHookEx: Adds a hook into the window callback list which then loads the dll(s)." & @CRLF & _
		"QueueUserAPC: Registers an asynchronous procedure call to the process' threads which then loads the dll(s).", GUICtrlGetHandle($h_C_LaunchMethod))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Adds flags to NtCreateThreadEx which cloaks the thread from debuggers and makes it less suspicious.", GUICtrlGetHandle($h_L_CloakThread));dummy label
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Adds flags to NtCreateThreadEx which cloaks the thread from debuggers and makes it less suspicious.", GUICtrlGetHandle($h_C_CloakThread))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Keep PEH: Doesn't modify the PE header of the dll(s)." & @CRLF & _
		"Erase PEH: Erases the PE header by wrting 0's to it to avoid detections." & @CRLF & _
		"Fake PEH: Replaces the PE header with the PE header of a normal windows module (eg. kernel32.dll).", GUICtrlGetHandle($h_C_Header))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Shifts the image by a randomly generated amount of bytes (manual mapping only).", GUICtrlGetHandle($h_L_Shift));dummy label
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Shifts the image by a randomly generated amount of bytes (manual mapping only).", GUICtrlGetHandle($h_C_Shift))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Removes the list entry of the dll(s) from the lists in the process enviroment block (not needed for manual mapping).", GUICtrlGetHandle($h_L_Unlink));dummy label
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Removes the list entry of the dll(s) from the lists in the process enviroment block (not needed for manual mapping).", GUICtrlGetHandle($h_C_Unlink))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Removes unnecessary data from the data directory of the image (manual mapping only).", GUICtrlGetHandle($h_L_Clean));dummy label
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Removes unnecessary data from the data directory of the image (manual mapping only).", GUICtrlGetHandle($h_C_Clean))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Creates a copy of the dll(s) in the user's temp directory which then get(s) loaded into the target process.", GUICtrlGetHandle($h_C_LoadCopy))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Renames the dll(s) randomly before injecting it/them.", GUICtrlGetHandle($h_C_RandomizeName))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Inject checkmarked dll(s).", GUICtrlGetHandle($h_B_Inject))
	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "Click to remove highlighted entries from the list.", GUICtrlGetHandle($h_B_Remove))

	_GUIToolTip_AddTool($h_T_TooltipCtrl, 0, "You won't have to see this again.", GUICtrlGetHandle($h_B_ToggleTips))

	If ($g_ToolTipsOn = False) Then
		_GUIToolTip_Deactivate($h_T_TooltipCtrl)
		GUICtrlSetData($h_B_ToggleTips, "Enable Tooltips")
	EndIf

	GUISetState(@SW_SHOW, $h_GUI)

	Local $Accel_CtrlA[1][2] = [[ "^a", $h_D_SelAll ]]
    GUISetAccelerators($Accel_CtrlA)

	$h_bitmap_buffer[$A_ID_Unused]		= CreateBitmapFromIcon(_WinAPI_GetSysColor($COLOR_MENU), @SystemDir & '\shell32.dll', 0, 16)
	$h_bitmap_buffer[$A_ID_Toggle]		= CreateBitmapFromIcon(_WinAPI_GetSysColor($COLOR_MENU), @SystemDir & '\shell32.dll', 238, 16)
	$h_bitmap_buffer[$A_ID_Activate]  	= CreateBitmapFromIcon(_WinAPI_GetSysColor($COLOR_MENU), @SystemDir & '\shell32.dll', 296, 16)
	$h_bitmap_buffer[$A_ID_Deactivate] 	= CreateBitmapFromIcon(_WinAPI_GetSysColor($COLOR_MENU), @SystemDir & '\shell32.dll', 131, 16)
	$h_bitmap_buffer[$A_ID_Open]		= CreateBitmapFromIcon(_WinAPI_GetSysColor($COLOR_MENU), @SystemDir & '\shell32.dll', 45, 16)
	$h_bitmap_buffer[$A_ID_SelectAll]	= CreateBitmapFromIcon(_WinAPI_GetSysColor($COLOR_MENU), @SystemDir & '\shell32.dll', 165, 16)
	$h_bitmap_buffer[$A_ID_Delete]		= CreateBitmapFromIcon(_WinAPI_GetSysColor($COLOR_MENU), @SystemDir & '\shell32.dll', 32, 16)

	$h_P_ProcIcon = _GUIImageList_Create(20, 20, 5, 1)
	   _GUIImageList_AddIcon($h_P_ProcIcon, @SystemDir & "\shell32.dll", 131, True)
	   _GUIImageList_AddIcon($h_P_ProcIcon, @SystemDir & "\imageres.dll", 11, True)
	   _GUIImageList_Add($h_P_ProcIcon, _WinAPI_CreateSolidBitmap($h_GUI, _WinAPI_GetSysColor($COLOR_MENU), 20, 20))
	   _GUIImageList_AddIcon($h_P_ProcIcon, $l_IconPath, 0, True)

	Return $h_GUI

EndFunc   ;==>CreateGUI

Func CreateGroupBox($Title, $TextWidth, $TextHeight, $TextColour, $TextStyle, $x, $y, $w, $h, $BorderColour)

	$h_tr 	= GUICtrlCreateLabel("", $x, $y, $w / 2 - $TextWidth / 2 + 0.5, 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$h_tr 	= GUICtrlCreateLabel("", $x + $w / 2 + $TextWidth / 2, $y, $w / 2 - $TextWidth / 2 + 0.5, 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$h_r 	= GUICtrlCreateLabel("", $x, $y + 1, 1, $h - 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$h_l 	= GUICtrlCreateLabel("", $x + $w - 1, $y + 1, 1, $h - 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$h_b 	= GUICtrlCreateLabel("", $x + 1, $y + $h - 1, $w - 2, 1)
	GUICtrlSetBkColor(-1, $BorderColour)

	$h_l 	= GUICtrlCreateLabel($Title, $x + $w / 2 - $TextWidth / 2, $y - $TextHeight / 3, $TextWidth, $TextHeight)
	GUICtrlSetFont(-1, $TextHeight / 2, $TextStyle)
	GUICtrlSetColor(-1, $TextColour)

EndFunc   ;==>CreateGroupBox

Func CreateBitmapFromIcon($BackgroundColour, $FilePath, $IconIndex, $Size)

    Local $hDC, $hBackDC, $hBackSv, $hIcon, $hBitmap

    $hDC = _WinAPI_GetDC(0)
    $hBackDC = _WinAPI_CreateCompatibleDC($hDC)
    $hBitmap = _WinAPI_CreateSolidBitmap(0, $BackgroundColour, $Size, $Size)
    $hBackSv = _WinAPI_SelectObject($hBackDC, $hBitmap)
    $hIcon = _WinAPI_ExtractIcon($FilePath, $IconIndex, True)

    If NOT @error Then
        _WinAPI_DrawIconEx($hBackDC, 0, 0, $hIcon, 0, 0, 0, 0, $DI_NORMAL)
        _WinAPI_DestroyIcon($hIcon)
	 EndIf

    _WinAPI_SelectObject($hBackDC, $hBackSv)
    _WinAPI_ReleaseDC(0, $hDC)
    _WinAPI_DeleteDC($hBackDC)

    Return $hBitmap

EndFunc   ;==>CreateBitmapFromIcon

Func DllList_PopUp($hwnd)

   Local $ItemHit = _GUICtrlListView_HitTest($hwnd)
   If (UBound($ItemHit) AND $ItemHit[0] <> -1) Then
	  $h_M_PopUp = _GUICtrlMenu_CreatePopup()
		 For $i = 0 To UBound($g_PopUpMenu_0_Names) - 1 Step 1
			$index = _GUICtrlMenu_AddMenuItem($h_M_PopUp, $g_PopUpMenu_0_Names[$i], $g_PopUpMenu_0_AIDs[$i])
			_GUICtrlMenu_SetItemBmp($h_M_PopUp, $index, $h_bitmap_buffer[$g_PopUpMenu_0_AIDs[$i]])
		 Next

	  $popup_action_id = _GUICtrlMenu_TrackPopupMenu($h_M_PopUp, $hwnd, -1, -1, 1, 1, 2)
	  _GUICtrlMenu_DestroyMenu($h_M_PopUp)

	  UpdateLV($h_L_Dlls, $popup_action_id, $M_Selected)

   Else
	  $h_M_PopUp = _GUICtrlMenu_CreatePopup()
		 For $i = 0 To UBound($g_PopUpMenu_1_Names) - 1 Step 1
			$index = _GUICtrlMenu_AddMenuItem($h_M_PopUp, $g_PopUpMenu_1_Names[$i], $g_PopUpMenu_1_AIDs[$i])
			_GUICtrlMenu_SetItemBmp($h_M_PopUp, $index, $h_bitmap_buffer[$g_PopUpMenu_1_AIDs[$i]])
		 Next

	  $popup_action_id = _GUICtrlMenu_TrackPopupMenu($h_M_PopUp, $hwnd, -1, -1, 1, 1, 2)
	  UpdateLV($h_L_Dlls, $popup_action_id, $M_All)

	  _GUICtrlMenu_DestroyMenu($h_M_PopUp)
	EndIf

EndFunc   ;==>DllList_PopUp

Func UpdateLV($hListView, $ActionID, $Mode = $M_All, $Index = -1, $Arch = "x64")

	$Count 		= _GUICtrlListView_GetItemCount($hListView)
	$SelIndices = _GUICtrlListView_GetSelectedIndices($hListView, True)

	Switch $ActionID
		Case $A_ID_Toggle
			If ($Mode = $M_Index) Then
				$checked = _GUICtrlListView_GetItemChecked($hListView, $Index)
				If ($checked = True) Then
					_GUICtrlListView_SetItemChecked($hListView, $Index, False)
				Else
					_GUICtrlListView_SetItemChecked($hListView, $Index, True)
				EndIf
			ElseIf ($Mode = $M_Selected AND UBound($SelIndices)) Then
				For $i = 1 To $SelIndices[0] Step 1
					$checked = _GUICtrlListView_GetItemChecked($hListView, $SelIndices[$i])
					If ($checked = True) Then
						_GUICtrlListView_SetItemChecked($hListView, $SelIndices[$i], False)
					Else
						_GUICtrlListView_SetItemChecked($hListView, $SelIndices[$i], True)
					EndIf
				Next
			ElseIf ($Mode = $M_All) Then
				For $i = 0 To $Count - 1 Step 1
					$checked = _GUICtrlListView_GetItemChecked($hListView, $i)
					If ($checked = True) Then
						_GUICtrlListView_SetItemChecked($hListView, $i, False)
					Else
						_GUICtrlListView_SetItemChecked($hListView, $i, True)
					EndIf
				Next
			EndIf

		Case $A_ID_Activate
			If ($Mode = $M_Index) Then
				_GUICtrlListView_SetItemChecked($hListView, $Index, True)
			ElseIf ($Mode = $M_Selected AND UBound($SelIndices) AND $SelIndices[0]) Then
				For $i = 1 To $SelIndices[0] Step 1
					_GUICtrlListView_SetItemChecked($hListView, $SelIndices[$i], True)
				Next
			ElseIf ($Mode = $M_All) Then
				For $i = 0 To $Count - 1 Step 1
				_GUICtrlListView_SetItemChecked($hListView, $i, True)
				Next
			EndIf

		Case $A_ID_Deactivate
			If ($Mode = $M_Index) Then
				_GUICtrlListView_SetItemChecked($hListView, $Index, False)
			ElseIf ($Mode = $M_Selected AND UBound($SelIndices) AND $SelIndices[0]) Then
				For $i = 1 To $SelIndices[0] Step 1
				_GUICtrlListView_SetItemChecked($hListView, $SelIndices[$i], False)
				Next
			ElseIf ($Mode = $M_All) Then
				For $i = 0 To $Count - 1 Step 1
					_GUICtrlListView_SetItemChecked($hListView, $i, False)
				Next
			EndIf

		Case $A_ID_Open
			$filepath = 0
			If ($Mode = $M_Index) Then
				$filepath = _GUICtrlListView_GetItemText($hListView, $Index, 2)
			ElseIf ($Mode = $M_Selected AND UBound($SelIndices) AND $SelIndices[0]) Then
				$filepath = _GUICtrlListView_GetItemText($hListView, $SelIndices[1], 2)
			ElseIf ($Mode = $M_All) Then
				$filepath = _GUICtrlListView_GetItemText($hListView, 0, 2)
			EndIf
			If (IsString($filepath)) Then
				AddFiles($filepath)
			EndIf

		Case $A_ID_SelectAll
			_GUICtrlListView_SetItemSelected($hListView, -1)

		Case $A_ID_Delete
			If ($Mode = $M_Index) Then
				_GUICtrlListView_DeleteItem($hListView, $Index)
			ElseIf ($Mode = $M_Selected AND UBound($SelIndices) AND $SelIndices[0]) Then
				For $i = $SelIndices[0] To 1 Step -1
				   _GUICtrlListView_DeleteItem($hListView, $SelIndices[$i])
				Next
			ElseIf ($Mode = $M_All) Then
				_GUICtrlListView_DeleteAllItems($hListView)
			EndIf

	EndSwitch

EndFunc   ;==>UpdateLV

Func GUI_LV_SubclassProc($hWnd, $uMsg, $wParam, $lParam, $iID, $pData)

   If ($hWnd = GUICtrlGetHandle($h_L_Dlls)) Then
	  If($uMsg = $WM_GETDLGCODE) Then
		 If ($wParam = $VK_DELETE) Then
			UpdateLV($h_L_Dlls, $A_ID_Delete, $M_Selected)
		 EndIf
	  EndIf
   EndIf

   Return DllCall("Comctl32.dll", "lresult", "DefSubclassProc", "hwnd", $hWnd, "uint", $uMsg, "wparam", $wParam, "lparam", $lParam)[0]

EndFunc   ;==>LV_SubClassProc

Func GUI_GUI_WM_NOTIFY($hwnd, $uMsg, $wParam, $lParam)

	$tNMHDR = DllStructCreate($tagNMHDR, $lParam)

	$hListView = $h_L_Dlls
	If (NOT IsHWnd($hListView)) Then
		$hListView = GUICtrlGetHandle($h_L_Dlls)
	EndIf

	If (HWnd($tNMHDR.hwndFrom) = $hListView) Then
		If ($tNMHDR.code = $NM_RCLICK) Then
			DllList_PopUp($hListView)

		ElseIf ($tNMHDR.code = $NM_CUSTOMDRAW) Then

			$l_UpdateProcess = True

		    If (_GUICtrlListView_GetColumnWidth($h_L_Dlls, 0) <> 18) Then
				_GUICtrlListView_SetColumnWidth($h_L_Dlls, 0, 18)
		    EndIf

			If (_GUICtrlListView_GetColumnWidth($h_L_Dlls, 4) <> 0) Then
				_GUICtrlListView_SetColumnWidth($h_L_Dlls, 4, 0)
			EndIf

		ElseIf ($tNMHDR.code = $NM_DBLCLK) Then
			$tInfo = DllStructCreate($tagNMITEMACTIVATE, $lParam)
			If ($tInfo.SubItem > 0) Then
				$l_DoubleClickedDll = $tInfo.Index
			EndIf

		EndIf
	EndIf

    Return $GUI_RUNDEFMSG

EndFunc   ;==>GUI_GUI_WM_NOTIFY

Func WM_NOTIFY($hwnd, $uMsg, $wParam, $lParam)

	If (NOT $l_ProcessPickerActive) Then
		Return GUI_GUI_WM_NOTIFY($hwnd, $uMsg, $wParam, $lParam)
	Else
		Return PP_GUI_WM_NOTIFY($hwnd, $uMsg, $wParam, $lParam)
	EndIf

EndFunc   ;==>WM_NOTFIY

Func WM_DROPFILES($hwnd, $uMsg, $wParam, $lParam)

    Local $Ret = _WinAPI_DragQueryFileEx($wParam, 1)
	If UBound($Ret) Then
		$DropFileBuffer = $Ret
	Else
		$DropFileBuffer[0] = 0
	EndIf

    Return $GUI_RUNDEFMSG

EndFunc   ;==>WM_DROPFILES

Func WM_COMMAND($hwnd, $uMsg, $wParam, $lParam)

    Local $NotifyCode = _WinAPI_HiWord($wParam)

    If ($NotifyCode = $EN_CHANGE) Then
		Local $NotifierID = _WinAPI_LoWord($wParam)

		If ($NotifierID = $h_I_ProcName AND NOT $l_IgnoreInputChange) Then
			$g_Processname = GUICtrlRead($h_I_ProcName)
			$l_UpdateProcess = True

		ElseIf ($NotifierID = $h_I_PID AND NOT $l_IgnoreInputChange) Then
			$g_PID = GUICtrlRead($h_I_PID)
			$l_UpdateProcess = True

		ElseIf ($NotifierID = $h_I_InjDelay AND NOT $l_IgnoreInputChange) Then
			$g_InjectionDelay = GUICtrlRead($h_I_InjDelay)
		EndIf

	EndIf

    Return $GUI_RUNDEFMSG

EndFunc   ;==>WM_COMMAND

Func ResetGUI()

	GUICtrlSetState($h_R_ProcName, $GUI_CHECKED)
	GUICtrlSetState($h_I_ProcName, $GUI_ENABLE)
	GUICtrlSetState($h_I_PID, $GUI_DISABLE)

	GUICtrlSetData($h_I_ProcName, $g_Processname)
	GUICtrlSetData($h_I_PID, $g_PID)

	GUICtrlSetData($h_I_InjDelay, $g_InjectionDelay)

	If ($g_CloseAfterInjection) Then
		GUICtrlSetState($h_C_CloseAI, $GUI_CHECKED)
	Else
		GUICtrlSetState($h_C_CloseAI, $GUI_UNCHECKED)
	EndIf

	If ($g_AutoInjection) Then
		GUICtrlSetState($h_C_AutoI, $GUI_CHECKED)
	Else
		GUICtrlSetState($h_C_AutoI, $GUI_UNCHECKED)
	EndIf

	_GUICtrlComboBox_SetCurSel($h_C_Method, $g_InjectionMethod)

	If (BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE) AND $g_RunNative) Then
		GUICtrlSetState($h_C_HijackHandle, BitOR($GUI_CHECKED, $GUI_ENABLE))
	ElseIf (NOT $g_RunNative) Then
		GUICtrlSetState($h_C_HijackHandle, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
		GUICtrlSetData($h_L_HijackHandle, $GUI_ENABLE)
	Else
		GUICtrlSetData($h_L_HijackHandle, $GUI_DISABLE)
		GUICtrlSetState($h_C_HijackHandle, BitOR($GUI_UNCHECKED, $GUI_ENABLE))
	EndIf

	_GUICtrlComboBox_SetCurSel($h_C_LaunchMethod, $g_LaunchMethod)

	If ($g_LaunchMethod = 0) Then
		GUICtrlSetState($h_L_CloakThread, $GUI_DISABLE)
		$state = 0
		If (BitAND($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)) Then
			$state = BitOR($GUI_CHECKED, $GUI_ENABLE)
		Else
			$state = BitOR($GUI_UNCHECKED, $GUI_ENABLE)
		EndIf
		GUICtrlSetState($h_C_CloakThread, $state)
	Else
		GUICtrlSetState($h_C_CloakThread, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
		GUICtrlSetState($h_L_CloakThread, $GUI_ENABLE)
	EndIf

	_GUICtrlComboBox_SetCurSel($h_C_Header, 0)
	If (BitAND($g_InjectionFlags, $INJ_ERASE_HEADER)) Then
		_GUICtrlComboBox_SetCurSel($h_C_Header, 1)
	ElseIf (BitAND($g_InjectionFlags, $INJ_ERASE_HEADER)) Then
		_GUICtrlComboBox_SetCurSel($h_C_Header, 2)
	EndIf

	If($g_InjectionMethod = 2) Then
		GUICtrlSetState($h_C_Unlink, BitOR($GUI_CHECKED, $GUI_DISABLE))
		GUICtrlSetState($h_L_Unlink, $GUI_ENABLE)
	ElseIf (BitAND($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)) Then
		GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
		GUICtrlSetState($h_C_Unlink, BitOR($GUI_CHECKED, $GUI_ENABLE))
	Else
		GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
		GUICtrlSetState($h_C_Unlink, BitOR($GUI_UNCHECKED, $GUI_ENABLE))
	EndIf

	If ($g_InjectionMethod <> 2) Then
		GUICtrlSetState($h_C_Shift, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
		GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
		GUICtrlSetState($h_C_Clean, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
		GUICtrlSetState($h_L_Clean, $GUI_ENABLE)
	Else
		GUICtrlSetState($h_L_Shift, $GUI_DISABLE)
		$state = 0
		If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
			$state = BitOR($GUI_CHECKED, $GUI_ENABLE)
		Else
			$state = BitOR($GUI_CHECKED, $GUI_DISABLE)
		EndIf
		GUICtrlSetState($h_C_Shift, $state)

		GUICtrlSetState($h_L_Clean, $GUI_DISABLE)
		$state = 0
		If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
			$state = BitOR($GUI_CHECKED, $GUI_ENABLE)
		Else
			$state = BitOR($GUI_CHECKED, $GUI_DISABLE)
		EndIf
		GUICtrlSetState($h_C_Clean, $state)
	EndIf

	If (BitAND($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)) Then
		GUICtrlSetState($h_C_RandomizeName, $GUI_CHECKED)
	Else
		GUICtrlSetState($h_C_RandomizeName, $GUI_UNCHECKED)
	EndIf

	If (BitAND($g_InjectionFlags, $INJ_LOAD_DLL_COPY)) Then
		GUICtrlSetState($h_C_LoadCopy, $GUI_CHECKED)
	Else
		GUICtrlSetState($h_C_LoadCopy, $GUI_UNCHECKED)
	EndIf

	If ($g_ToolTipsOn = False) Then
		_GUIToolTip_Deactivate($h_T_TooltipCtrl)
		GUICtrlSetData($h_B_ToggleTips, "Enable Tooltips")
	Else
		_GUIToolTip_Activate($h_T_TooltipCtrl)
		GUICtrlSetData($h_B_ToggleTips, "Disable Tooltips")
	EndIf

EndFunc   ;==>ResetGUI

Func CloseGUI()

	GUIRegisterMsg($WM_NOTIFY,		"")
	GUIRegisterMsg($WM_DROPFILES, 	"")
	GUIRegisterMsg($WM_COMMAND, 	"")

    _WinAPI_RemoveWindowSubclass(GUICtrlGetHandle($h_L_Dlls), $ph_GUI_LV_SubclassProc, 1)
	DllCallbackFree($h_GUI_LV_SubclassProc)

	_GUIImageList_Destroy($h_P_ProcIcon)

	For $i = 0 To UBound($h_bitmap_buffer) - 1 Step 1
	   _WinAPI_DeleteDC($h_bitmap_buffer[$i])
    Next

	GUISetState(@SW_HIDE)
	GUIDelete($h_GUI)

EndFunc   ;==>CloseGUI

Func UpdateCursor()

	Local $CursorInfo = GUIGetCursorInfo($h_GUI)

	If (NOT @error) Then
		If (WinActive($h_GUI) AND $CursorInfo[0] >= 0 AND $CursorInfo[0] <= $l_GUIWidth AND $CursorInfo[1] >= 0 AND $CursorInfo[1] <= $l_BannerHeight AND $CursorInfo[4] = $h_P_Banner) Then
			$l_HoverBanner = True
		Else
			$l_HoverBanner = False
		EndIf
		If (WinActive($h_GUI) AND $CursorInfo[0] >= 130 AND $CursorInfo[0] <= 151 AND $CursorInfo[1] >= 132 AND $CursorInfo[1] <= 152) Then
			$l_HoverProcIcon = True
		Else
			$l_HoverProcIcon = False
		EndIf
	EndIf

	If ($l_HoverProcIcon <> $l_HoverProcIconPrev) Then
		If ($l_HoverProcIcon = True) Then
			Local $CursorPos = MouseGetPos()
			ToolTip($g_ExePath, $CursorPos[0], $CursorPos[1])
		Else
			ToolTip("")
		EndIf
		$l_HoverProcIconPrev = $l_HoverProcIcon
	EndIf

	If ($l_HoverBanner <> $l_HoverBannerPrev) Then
		If ($l_HoverBanner = True) Then
			Local $CursorPos = MouseGetPos()
			ToolTip("www.guidedhacking.com", $CursorPos[0], $CursorPos[1])
		Else
			ToolTip("")
		EndIf
		$l_HoverBannerPrev = $l_HoverBanner
	EndIf

EndFunc   ;==>UpdateCursor

Func AddFile($Path, $UpdateLastDirectory = False)

	If (NOT StringInStr($Path, ".dll") AND NOT StringInStr($Path, ".exe")) Then
		Return
	EndIf

	$DllCount = _GUICtrlListView_GetItemCount($h_L_Dlls)
	For $i = 0 To $DllCount Step 1
		$currPath = _GUICtrlListView_GetItemText($h_L_Dlls, $i, 2)
		If (NOT StringCompare($Path, $currPath)) Then
			MsgBox($MB_ICONERROR, $Path, "This file is already in the list.")
			Return
		EndIf
	Next

	SetError(0)
	$Architecture = GetFileArchitecture($Path)
	If (@error) Then
		$err = @error
		SetError(0)

		Select
			Case $err = 1
				MsgBox($MB_ICONERROR, "Invalid MZ header: 0x" & Hex($Architecture), $Path)
				Return

			Case $err = 2
				MsgBox($MB_ICONERROR, "Invalid PE signature: 0x" & Hex($Architecture), $Path)
				Return

			Case $err = 3
				MsgBox($MB_ICONERROR, "Architecture not supported: 0x" & Hex($Architecture), $Path)
				Return
		EndSelect
	EndIf

	Local $Split = StringSplit($Path, "\")
	$Index = _GUICtrlListView_AddItem($h_L_Dlls, "")
	_GUICtrlListView_AddSubItem($h_L_Dlls, $Index, $Split[$Split[0]], 1)
	_GUICtrlListView_AddSubItem($h_L_Dlls, $Index, $Path, 2)
	_GUICtrlListView_AddSubItem($h_L_Dlls, $Index, $Architecture, 3)
	_GUICtrlListView_AddSubItem($h_L_Dlls, $Index, 0, 4)

	If ($UpdateLastDirectory = True) Then
		$g_LastDirectory = ""
		For $i = 0 To $Split[0] - 2 Step 1
			$g_LastDirectory = $g_LastDirectory & $Split[$i + 1] & "\"
		Next
	EndIf

EndFunc   ;==>AddFile

Func AddFiles($Path = "")

	If (NOT StringCompare($Path, "")) Then
		$Path = $g_LastDirectory
	EndIf

	$Files = FileOpenDialog("Select dll files", $Path, "Dynamic Link Libraries (*.dll)", $FD_MULTISELECT)
	If (@error) Then
		Return
	EndIf

	Local $Chars = StringSplit($Files, "|")
	If (@error = 1) Then
		AddFile($Files, True)
		Return
	EndIf

	For $i = 2 To $Chars[0] Step 1
		AddFile($Chars[1] & "\" & $Chars[$i])
	Next

	$g_LastDirectory = $Chars[1]

EndFunc   ;==>AddFiles

Func UpdateProcessIcon($TargetPID)

    _GUIImageList_Draw($h_P_ProcIcon, 2, _WinAPI_GetDC($h_GUI), 130, 132)

	If (NOT StringCompare($g_Processname, "Broihon.exe") OR $g_PID = 1337) Then
	    _GUIImageList_Draw($h_P_ProcIcon, 3, _WinAPI_GetDC($h_GUI), 130, 132)
		$g_ExePath = "Praise Broihon ♥♥♥"
	    Return
    EndIf

	If ($TargetPID) Then
		Local $hK32 = DllOpen("kernel32.dll")
		$hProc_info = DllCall($hK32, "HANDLE", "OpenProcess", _
			"DWORD", $PROCESS_QUERY_LIMITED_INFORMATION, _
			"INT", 0, _
			"DWORD", $TargetPID _
		)

		If (IsArray($hProc_info) AND $hProc_info[0]) Then

			Local $dllRet = GetProcessExePath($hProc_info)
			If (IsArray($dllRet) AND ($dllRet[0] <> 0)) Then
				$l_ProcIconIndex = 4
				_GUIImageList_Remove($h_P_ProcIcon, 4)
				$g_ExePath = $dllRet[3] & " (" & $l_TargetProcessArchitecture & ")"
				If (_GUIImageList_AddIcon($h_P_ProcIcon, $dllRet[3], 0, True) = -1) Then
					$l_ProcIconIndex = 1
				EndIf
			EndIf

			DllCall($hK32, "BOOL", "CloseHandle", _
				"HANDLE", $hProc_info[0] _
			)

		Else
			$l_ProcIconIndex = 1
			$g_ExePath = "Can't resolve file path."
		EndIf

		_GUIImageList_Draw($h_P_ProcIcon, $l_ProcIconIndex, _WinAPI_GetDC($h_GUI), 130, 132)

		DllClose($hK32)

	Else
		$g_ExePath = "No process selected."
		_GUIImageList_Draw($h_P_ProcIcon, 0, _WinAPI_GetDC($h_GUI), 130, 132)
	EndIf

EndFunc   ;==>UpdateProcessIcon

Func UpdateTargetProcess()

	$l_IgnoreInputChange = True

	If ($g_ProcessByName) Then
		$g_Processname = GUICtrlRead($h_I_ProcName)
		$lPID1 = SearchProcessList($g_ProcessList, 0, $g_Processname, False)
		$lPID2 = SearchProcessList($g_ProcessList, $g_PID, 0, False)

		If ($l_ChangedFont = True) Then
			GUICtrlSetFont($h_I_ProcName, 9)
			$l_ChangedFont = False
		EndIf

		If ($lPID1) Then
			If ($lPID2) Then
				If ($lPID1 <> $lPID2) Then
					If (NOT StringCompare($g_Processname, SearchProcessList($g_ProcessList, $lPID2, 0, True))) Then
						$g_PID = $lPID2
					Else
						$g_PID = $lPID1
					EndIf
				EndIf
			Else
				$g_PID = $lPID1
			EndIf
		Else
			$g_PID = 0
		EndIf

		GUICtrlSetData($h_I_PID, $g_PID)
	Else
		$g_PID = GUICtrlRead($h_I_PID)
		$g_Processname = SearchProcessList($g_ProcessList, $g_PID, 0, True)

		If (@error) Then
			GUICtrlSetFont($h_I_ProcName, 9, $FW_LIGHT, $GUI_FONTITALIC)
			$g_Processname = "Invalid PID"
			$l_ChangedFont = True
		Else
			GUICtrlSetFont($h_I_ProcName, 9)
		EndIf

		GUICtrlSetData($h_I_ProcName, $g_Processname)
	EndIf

	$Arch = GetProcessArch($g_PID)
	If (IsString($Arch)) Then
		$l_TargetProcessArchitecture = $Arch
	EndIf

	UpdateProcessIcon($g_PID)

	$l_ProcessDead = False

	$l_IgnoreInputChange = False

EndFunc   ;==>UpdateTargetProcess

Func SearchProcessList($List, $PID, $Name, $bRetName)

	For $i = 1 To $List[0][0] Step 1
		If ($PID <> 0) Then
			If ($List[$i][1] = $PID) Then
				If ($bRetName = True) Then
					Return $List[$i][0]
				Else
					Return $PID
				EndIf
			EndIf
		Else
			If ($List[$i][0] = $Name) Then
				If ($bRetName = True) Then
					Return $Name
				Else
					Return $List[$i][1]
				EndIf
			EndIf
		EndIf
	Next

	Return 0

EndFunc

Func UpdateGUI()

	If ($l_DoubleClickedDll <> -1) Then
		$filepath = _GUICtrlListView_GetItemText($h_L_Dlls, $l_DoubleClickedDll, 2)
		AddFiles($filepath)
		$l_DoubleClickedDll = -1
	EndIf

	$current_tick = _WinAPI_GetTickCount()
	If ($current_tick - $last_tick > 150) Then
		$last_tick = $current_tick
		$l_UpdateByTickCount = True
		$g_ProcessList = ProcessList()
	EndIf

	$Msg = GUIGetMsg($h_GUI)
	Select
	    Case $Msg = $GUI_EVENT_CLOSE
			Return $GUI_EXIT

		Case $Msg = $h_P_Banner
			ShellExecute("www.guidedhacking.com")

	    Case $Msg = $h_D_SelAll
		   If (_WinAPI_GetFocus() = GUICtrlGetHandle($h_L_Dlls)) Then
			   UpdateLV($h_L_Dlls, $A_ID_SelectAll)
		   EndIf

	   	Case $Msg = $h_B_SelProcess
			$l_ProcessPickerActive 	= True
			$l_IgnoreInputChange 	= True

			$newPID = CreateProcessList($g_ProcessList)
			If ($newPID <> -1) Then
				$g_PID = $newPID
				GUICtrlSetData($h_I_PID, $g_PID)
				$g_Processname = SearchProcessList($g_ProcessList, $g_PID, 0, True)
				GUICtrlSetData($h_I_ProcName, $g_Processname)

				$Arch = GetProcessArch($g_PID)
				If (IsString($Arch)) Then
					$l_TargetProcessArchitecture = $Arch
				EndIf

				UpdateProcessIcon($g_PID)
			EndIf

			$l_IgnoreInputChange 	= False
			$l_ProcessPickerActive 	= False

		Case $Msg = $h_B_Add
			AddFiles()

		Case $Msg = $h_B_Remove
			UpdateLV($h_L_Dlls, $A_ID_Delete, $M_Selected)

		Case $Msg = $GUI_EVENT_DROPPED
			If ($DropFileBuffer[0]) Then
				For $i = 1 To $DropFileBuffer[0]
					AddFile($DropFileBuffer[$i])
				Next
			EndIf

		Case $Msg = $h_L_Dlls

			$State = GUICtrlGetState($h_L_Dlls)

			If ($State = 0) Then
				$count = _GUICtrlListView_GetItemCount($h_L_Dlls)
				For $i = 0 To $count - 1 Step 1
					$is_checked = _GUICtrlListView_GetItemChecked($h_L_Dlls, $i)
				    If $is_checked Then
				       _GUICtrlListView_SetItemText($h_L_Dlls, $i, 1, 4)
				    Else
				       _GUICtrlListView_SetItemText($h_L_Dlls, $i, 0, 4)
				    EndIf
				Next
				_GUICtrlListView_SimpleSort($h_L_Dlls, $g_DllList_SortSense, 4, True)

			ElseIf ($State = 1) Then
				_GUICtrlListView_SimpleSort($h_L_Dlls, $g_DllList_SortSense, 1, True)

			ElseIf ($State = 2) Then
				_GUICtrlListView_SimpleSort($h_L_Dlls, $g_DllList_SortSense, 2, True)

			ElseIf ($State = 3) Then
				_GUICtrlListView_SimpleSort($h_L_Dlls, $g_DllList_SortSense, 3, True)
			EndIf

		Case $Msg = $h_B_Reset
			Return $GUI_RESET

		Case $Msg = $h_R_ProcName
			If ((GUICtrlRead($h_R_ProcName) = $GUI_CHECKED) AND  (GUICtrlGetState($h_I_PID) <> $GUI_DISABLE)) Then
				GUICtrlSetState($h_I_PID, $GUI_DISABLE)
				GUICtrlSetState($h_I_ProcName, $GUI_ENABLE)
				$g_ProcessByName = True
			EndIf

			$l_UpdateProcess = True

		Case $Msg = $h_R_PID
			If ((GUICtrlRead($h_R_PID) = $GUI_CHECKED) AND  (GUICtrlGetState($h_I_ProcName) <> $GUI_DISABLE)) Then
				GUICtrlSetState($h_I_ProcName, $GUI_DISABLE)
				GUICtrlSetState($h_I_PID, $GUI_ENABLE)
				$g_ProcessByName = False
			EndIf

			$l_UpdateProcess = True

		Case $Msg = $h_C_CloseAI
			If (GUICtrlRead($h_C_CloseAI) = $GUI_CHECKED) Then
				$g_CloseAfterInjection = True
			Else
				$g_CloseAfterInjection = False
			EndIf

		Case $Msg = $h_C_AutoI
			If (GUICtrlRead($h_C_AutoI) = $GUI_CHECKED) Then
				$g_AutoInjection = True
			Else
				$g_AutoInjection = False
			EndIf

		Case $Msg = $h_C_Method
			$g_InjectionMethod = _GUICtrlComboBox_GetCurSel($h_C_Method)

			If ($g_InjectionMethod = 0) Then
				If (GUICtrlGetState($h_C_Shift) <> $GUI_DISABLE) Then
					GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
					GUICtrlSetState($h_C_Unlink, $GUI_ENABLE)

					GUICtrlSetState($h_C_Shift, BitOR($GUI_DISABLE, $GUI_UNCHECKED))
					GUICtrlSetState($h_C_Clean, BitOR($GUI_DISABLE, $GUI_UNCHECKED))
					GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
					GUICtrlSetState($h_L_Clean, $GUI_ENABLE)

					If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_SHIFT_MODULE)
					EndIf
					If (BitAND($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)
					EndIf
				EndIf
			ElseIf ($g_InjectionMethod = 1) Then
				If (GUICtrlGetState($h_C_Shift) <> $GUI_DISABLE) Then
					GUICtrlSetState($h_L_Unlink, $GUI_DISABLE)
					GUICtrlSetState($h_C_Unlink, $GUI_ENABLE)

					GUICtrlSetState($h_C_Shift, BitOR($GUI_DISABLE, $GUI_UNCHECKED))
					GUICtrlSetState($h_C_Clean, BitOR($GUI_DISABLE, $GUI_UNCHECKED))
					GUICtrlSetState($h_L_Shift, $GUI_ENABLE)
					GUICtrlSetState($h_L_Clean, $GUI_ENABLE)

					If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_SHIFT_MODULE)
					EndIf
					If (BitAND($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)) Then
						$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)
					EndIf
				EndIf
			ElseIf ($g_InjectionMethod = 2) Then
				If (GUICtrlGetState($h_C_Shift) <> $GUI_ENABLE) Then

					GUICtrlSetState($h_L_Shift, $GUI_DISABLE)
					GUICtrlSetState($h_L_Clean, $GUI_DISABLE)
					GUICtrlSetState($h_C_Shift, $GUI_ENABLE)
					GUICtrlSetState($h_C_Clean, $GUI_ENABLE)

					GUICtrlSetState($h_C_Unlink, BitOR($GUI_CHECKED, $GUI_DISABLE))
					GUICtrlSetState($h_L_Unlink, $GUI_ENABLE)

					$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)
				EndIf
			EndIf

		Case $Msg = $h_C_HijackHandle
			If (GUICtrlRead($h_C_HijackHandle) = $GUI_CHECKED) Then
				If (NOT BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE)) Then
					$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_HIJACK_HANDLE)
				EndIf
			Else
				If (BitAND($g_InjectionFlags, $INJ_HIJACK_HANDLE)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_HIJACK_HANDLE)
				EndIf
			EndIf

		Case $Msg = $h_C_LaunchMethod
			$g_LaunchMethod = _GUICtrlComboBox_GetCurSel($h_C_LaunchMethod)
			If (($g_LaunchMethod) AND (BitAND(GUICtrlGetState($h_C_CloakThread), $GUI_ENABLE))) Then
				GUICtrlSetState($h_C_CloakThread, BitOR($GUI_UNCHECKED, $GUI_DISABLE))
				GUICtrlSetState($h_L_CloakThread, $GUI_ENABLE)
				If (BitAND($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)
				EndIf
			ElseIf (($g_LaunchMethod = 0) AND (BitAND(GUICtrlGetState($h_C_CloakThread), $GUI_DISABLE))) Then
				GUICtrlSetState($h_L_CloakThread, $GUI_DISABLE)
				GUICtrlSetState($h_C_CloakThread, $GUI_ENABLE)
			EndIf

		Case $Msg = $h_C_CloakThread
			If (GUICtrlRead($h_C_CloakThread) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)
			ElseIf (BitAND($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)) Then
				$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_THREAD_CREATE_CLOAKED)
			EndIf

		Case $Msg = $h_C_Header
			$HeaderOption = _GUICtrlComboBox_GetCurSel($h_C_Header)
			If (BitAND($g_InjectionFlags, $INJ_ERASE_HEADER)) Then
				$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_ERASE_HEADER)
			EndIf
			If (BitAND($g_InjectionFlags, $INJ_FAKE_HEADER)) Then
				$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_FAKE_HEADER)
			EndIf

			If ($HeaderOption = 1) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_ERASE_HEADER)
			ElseIf ($HeaderOption = 2) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_FAKE_HEADER)
			EndIf

		Case $Msg = $h_C_Unlink
			If (GUICtrlRead($h_C_Unlink) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)
			Else
				If (BitAND($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_UNLINK_FROM_PEB)
				EndIf
			EndIf

		Case $Msg = $h_C_Shift
			If (GUICtrlRead($h_C_Shift) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_SHIFT_MODULE)
			Else
				If (BitAND($g_InjectionFlags, $INJ_SHIFT_MODULE)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_SHIFT_MODULE)
				EndIf
			EndIf

		Case $Msg = $h_C_Clean
			If (GUICtrlRead($h_C_Clean) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)
			Else
				If (BitAND($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_CLEAN_DATA_DIR)
				EndIf
			EndIf

		Case $Msg = $h_C_RandomizeName
			If (GUICtrlRead($h_C_RandomizeName) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)
			Else
				If (BitAND($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_SCRAMBLE_DLL_NAME)
				EndIf
			EndIf

		Case $Msg = $h_C_LoadCopy
			If (GUICtrlRead($h_C_LoadCopy) = $GUI_CHECKED) Then
				$g_InjectionFlags = BitOR($g_InjectionFlags, $INJ_LOAD_DLL_COPY)
			Else
				If (BitAND($g_InjectionFlags, $INJ_LOAD_DLL_COPY)) Then
					$g_InjectionFlags = BitXOR($g_InjectionFlags, $INJ_LOAD_DLL_COPY)
				EndIf
			EndIf

		Case $Msg = $h_B_Inject
			Return $GUI_INJECT

		Case $Msg = $h_L_Version
			Return $GUI_UPDATE

		Case $Msg = $h_B_Help
			ShellExecute("https://www.guidedhacking.com/ghinjector")

		Case $Msg = $h_B_Changelog
			ShellExecute("https://www.pastebin.com/eN7KPX3x")

		Case $Msg = $h_B_ToggleTips
			If ($g_ToolTipsOn = True) Then
				GUICtrlSetData($h_B_ToggleTips, "Enable tooltips")
				_GUIToolTip_Deactivate($h_T_TooltipCtrl)
				$g_ToolTipsOn = False
			Else
				GUICtrlSetData($h_B_ToggleTips, "Disable tooltips")
				_GUIToolTip_Activate($h_T_TooltipCtrl)
				$g_ToolTipsOn = True
			EndIf

	EndSelect

	If ($l_UpdateByTickCount = True) Then
		$pid_by_name 	=  SearchProcessList($g_ProcessList, 0, $g_Processname, False)
		$pid_by_pid 	=  SearchProcessList($g_ProcessList, $g_PID, 0, False)

		If ($g_ProcessByName AND $pid_by_name AND NOT $pid_by_pid) Then
			UpdateTargetProcess()
		ElseIf(NOT $g_ProcessByName AND NOT $l_UpdateProcess AND $pid_by_name AND NOT $pid_by_pid) Then
			$g_ProcessByName = True
			UpdateTargetProcess()
			$g_ProcessByName = False
		ElseIf(NOT $pid_by_name AND NOT $pid_by_pid AND NOT $l_ProcessDead) Then
			UpdateProcessIcon(0)
			$l_ProcessDead = True
		EndIf

		If ($l_UpdateProcess) Then
			UpdateTargetProcess()
			$l_UpdateProcess = False
		EndIf

		$l_UpdateByTickCount = False
	EndIf

	UpdateCursor()


	Return $GUI_RETURN

EndFunc   ;==>UpdateGUI