using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;


namespace Nitra.Compiler
{
  internal partial class ParseMethodEmitter : MethodEmitter
  {
    public override CompileList(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      | _ when subrule.IsOptimizedList               => CompileListOptimizedList              (code, subrule)
      | _ when subrule.IsDynamicSyntaxExtentionPoint => CompileListDynamicSyntaxExtentionPoint(code, subrule)
      | _                                            => CompileListNormal                     (code, subrule)
    }

    public CompileListDynamicSyntaxExtentionPoint(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      assert2(subrule.Item.Subrules.Length == 1);
      assert2((subrule.MinCount, subrule.MaxCount) is (0, None));

      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));
      def callInfo          = subrule.Item.NonMarkerSubrules[0] :> SubruleCompileInfo.ExtensibleCall;
      assert(callInfo.BindingPower.IsZero);

      code.Add(<[
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          $(AllocateParentRawTree(subrule));
          when (true)
          {
            def startPos = $CurTextPos;
            def parseSession = parseResult.ParseSession;
            def startGrammar = this.Grammar;
            mutable currentGrammar = startGrammar;
            parseSession.CurrentGrammar = startGrammar;
            mutable currentParser = $(Owner.MakeParserName(callInfo.Symbol, callInfo.BindingPower) : global);
            while ($(CurTextPos) < text.Length)
            {
              newPos = currentParser.Parse($(CurTextPos), text, parseResult);
              if (newPos >= 0)
              {
                $(CurTextPos) = newPos;
                when (parseSession.CurrentGrammar : object != currentGrammar)
                {
                  currentGrammar = parseSession.CurrentGrammar;
                  currentParser = currentGrammar.GetExtensibleRuleParser($(callInfo.Symbol.GetRuleDescriptorRef()), "0");
                }
              }
              else break;
            }
            $(SetSubruleSize(subrule, <[ $CurTextPos - startPos ]>));
            parseSession.CurrentGrammar = startGrammar;
          }
          $(GotoContinueParseLabel(subrule));
      ]>);
    }

    public CompileListOptimizedList(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      assert3(subrule.Item.Subrules.Length == 1);
      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));
      def firstChild        = subrule.Item.NonMarkerSubrules[0];
      def regexCall         = if (firstChild is SubruleCompileInfo.RegularCall(symbol)) <[ $(MakeRegularRuleCallFullName(symbol))($CurTextPos, text) ]> else assert(false);
      def fail              = PExprLabel(this.Environment.Manager, "childFail");
      def childPredicateCode = CompilePredicate(firstChild.HeadPredicates, fail.Goto());
      def checkCounter = match (subrule.MinCount, subrule.MaxCount)
      {
        | (0,   None)      => <[ {} ]>
        | (min, None)      => <[ when (size < $min)                $(GotoFailParseLabel(subrule)); ]>
        | (min, Some(max)) => <[ when (size < $min || size > $max) $(GotoFailParseLabel(subrule)); ]>
      }
      code.Add(<[
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          $(AllocateParentRawTree(subrule));
          when (true)
          {
            def startPos = $CurTextPos;
            while ($(CurTextPos) < text.Length)
            {
              $childPredicateCode;
              newPos = $regexCall;
              if (newPos >= 0)
                $(CurTextPos) = newPos;
              else
                break;
            }
            $(fail.Label());
            def size = $CurTextPos - startPos;
            $checkCounter;
            $(SetSubruleSize(subrule, <[ size ]>));
          }
          $(GotoContinueParseLabel(subrule));
      ]>);
    }

    public CompileListNormal(code : SCG.List[PExpr], subrule : SubruleCompileInfo.List) : void
    {
      CompileFunction(subrule.Item);
      def localVariableEmitter = LocalVariableEmitter();
      def stateData = ListStateData(localVariableEmitter, subrule);
      def ifCounterEqualsToMaxThenContinue()
      {
        if (subrule.MaxCount is Some(max))
          <[
            when ($(stateData.Counter) == $max)
              $(GotoContinueParseLabel(subrule));
          ]>
        else
          <[ {} ]>
      }
      def ifCounterLessThanMinThenFail()
      {
        if (subrule.MinCount > 0)
          <[
            when ($(stateData.Counter) < $(subrule.MinCount))
            {
              parseState = $(subrule.State);
              $(GotoFailParseLabel(subrule));
            }
          ]>
        else
          <[ {} ]>
      }

      def headPredicateCode = CompilePredicate(subrule.HeadPredicates, GotoFailParseLabel(subrule));

      def body = <[
        $(ParseLabel(subrule));
          _ = $(subrule.ToString());
          $headPredicateCode;
          $(AllocateParentRawTree(subrule));
          $(stateData.Init());
          $(stateData.ListStartPos) = $CurTextPos;
          $(stateData.ListEndPos) = $CurTextPos;
          while (true)
          {
            $CurTextPos = $(FunctionName(subrule.Item) : global)($CurTextPos, text, parseResult);
            if ($(stateData.ListEndPos) < $CurTextPos)
            {
              $(stateData.ListEndPos) = $CurTextPos;
              $(stateData.Inc());
              $(SetSubruleSize(subrule, <[ $CurTextPos - $(stateData.ListStartPos) ]>));
              $(ifCounterEqualsToMaxThenContinue());
            }
            else
            {
              $(ifCounterLessThanMinThenFail());
              $CurTextPos = $(stateData.ListEndPos);
              $(SetSubruleSize(subrule, <[ $CurTextPos - $(stateData.ListStartPos) ]>));
              $(GotoContinueParseLabel(subrule));
            }
          }
      ]>;
      code.Add(<[ when (true) { ..$(localVariableEmitter.Define()); $body } ]>);
    }
  }
}
